# Get all simulations
query AllSimulations {
  simulations {
    simulation_id
    runs {
      created
      simulation {
        created
      }
    }
  }
}

query allRunsAndSteps {
  runs {
    created
    started
    status
    steps {
      created
      ended
    }
  }
}

mutation startNewRun($simulation_id: uuid!) {
  start_run(object: {dsl: {test: true}, simulation_id: $simulation_id}) {
    run_id
    created
  }
}
# api functions ..
mutation createRun($simulation_id: uuid!, $dsl: jsonb!) {
  start_run(object: {dsl: $dsl, simulation_id: $simulation_id}) {
    run_id
    created
    status
  }
}

mutation createStep($run_id: uuid!, $name: String!, $image: String!, $pipeline_step_number: Int!) {
  insert_steps_one(object: {run_id: $run_id, name:$name, image:$image, pipeline_step_number:$pipeline_step_number}){
    created
    run_id
    step_id
    status
    name
  }
}

mutation setStepAsStarted($step_id: Int!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {started: "now()", status: active}) {
    step_id
    started
    status
    name
    pipeline_step_number
    created
  }
}
mutation setStepAsEndedSuccess($step_id: Int!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {ended: "now()", status: completed}) {
    step_id
    started
    status
    name
    pipeline_step_number
    created
    ended
  }
}

mutation setRunAsStarted($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {started: "now()", status: active}) {
    run_id
  }
}

mutation setRunAsEndedSuccess($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {ended: "now()", status: completed}) {
    run_id
  }
}
mutation createSimulation ($model_id: uuid!){
  create_simulation(object: {model_id: $model_id}) {
    model_id
    simulation_id
    created
  }
}

query getSimulationIdandSteps($_eq: uuid!) {
  runs(where: {run_id: {_eq: $_eq}}) {
    simulation_id
    steps {
      step_id
      pipeline_step_number
      image
      name   
    }
  }
}

mutation insertResourceUsage($cpu: numeric = "", $memory: numeric = "", $memory_max: numeric = "", $rx_value: numeric = "", $tx_value: numeric = "", $step_id: Int = 10, $time: timestamptz = "") {
  insert_simpipe_resource_usage_one(object: {cpu: $cpu, memory: $memory, memory_max: $memory_max, rx_value: $rx_value, tx_value: $tx_value, step_id: $step_id, time: $time}) {
    id
  }
}

mutation insertLog($step_id: Int, $text: String) {
  insert_simpipe_logs_one(object: {step_id: $step_id, text: $text}) {
    step_id
  }
}
