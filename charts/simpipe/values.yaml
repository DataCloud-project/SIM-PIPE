# Default values for simpipe.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

utils:
  nameOverride: ""
  fullnameOverride: ""

controller:
  replicaCount: 1

  image:
    repository: ghcr.io/datacloud-project/sim-pipe-controller
    #pullPolicy: IfNotPresent
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    # tag: "1.23.3"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  minio:
    # Configured by default for the localhost port forwarding in forwarding.py
    publicUrl: http://localhost:8085
    internalUrl: http://simpipe-minio.default.svc.cluster.local:9000
    accessKey: simpipe
    secretKey: simpipe1234
    bucketName: artifacts
    region: "no-region"
  argo:
    endpoint: http://simpipe-argo-workflows-server:2746/
  prometheus:
    serverUrl: http://prometheus-operated:9090
  carbontracker:
    endpoint: http://simpipe-carbontracker:8000

  serviceAccount:
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 9000

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

frontend:
  replicaCount: 1

  image:
    repository: ghcr.io/datacloud-project/sim-pipe-frontend
    #pullPolicy: IfNotPresent
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    # tag: "1.23.3"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: false
    className: ""
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

kube-prometheus-stack:
  enabled: true
  kubeEtcd:
    enabled: false
  grafana:
    enabled: false
    # Actually never used
    adminPassword: simpipe
    grafana.ini:
      auth.anonymous:
        enabled: true
        org_role: Admin
        org_name: Main Org.
      auth:
        disable_login_form: true
        disable_signout_menu: true
  # Many kubernetes distributions doesn't support the hostRootFsMount feature
  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false
  prometheus:
    prometheusSpec:
      retention: 10y
      storageSpec:
        volumeClaimTemplate:
          spec:
            #storageClassName: ""
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 8Gi
      additionalRemoteWrite:
        []
        # - url: "http://simpipe-promscale.default.svc.cluster.local:9201/write"
        #   remoteTimeout: 100s
        #   queueConfig:
        #     maxSamplesPerSend: 10000
        #- url: "http://simpipe-influxdb.default.svc.cluster.local:8086/api/
      additionalRemoteRead:
        []
        # - url: "http://simpipe-promscale.default.svc.cluster.local:9201/read"
        #   readRecent: true

argo-workflows:
  enabled: true

  server:
    extraArgs:
      - --auth-mode=server

  workflow:
    serviceAccount:
      create: true

  useDefaultArtifactRepo: true
  artifactRepository:
    # TODO: recommended to use something else
    archiveLogs: true
    s3:
      bucket: artifacts
      accessKeySecret:
        name: simpipe-minio
        key: root-user
      secretKeySecret:
        name: simpipe-minio
        key: root-password
      endpoint: simpipe-minio.default.svc.cluster.local:9000
      insecure: true
      useSDKCreds: false
  controller:
    workflowDefaults:
      spec:
        parallelism: 1
        templateDefaults:
          metadata:
            labels:
              simpipe: "true"
      metadata:
        labels:
          simpipe: "true"
    workflowWorkers: 1
    persistence:
      archive: true
      clusterName: simpipe
      postgresql:
        host: simpipe-postgresql.default.svc.cluster.local
        port: 5432
        database: postgres
        tableName: simpipe
        userNameSecret:
          name: simpipe-utils-database-credentials
          key: username
        passwordSecret:
          name: simpipe-utils-database-credentials
          key: password
        sslMode: disable

argo-events:
  enabled: false
  webhook:
    enabled: true

minio:
  enabled: true
  auth:
    rootUser: simpipe
    # Obviously placeholder password
    rootPassword: simpipe1234
  defaultBuckets: "artifacts,logs,registry"
  persistence:
    size: 32Gi

docker-registry:
  enabled: false
  image:
    tag: 2.8.1
  storage: s3
  secrets:
    s3:
      accessKey: simpipe
      secretKey: simpipe1234
  s3:
    bucket: registry
    region: us-east-1
    regionEndpoint: http://simpipe-minio.default.svc.cluster.local:9000/

sftpgo:
  enabled: true
  # The following configuration will load the data from the secret
  # generated by the sftp-config-secret.yaml and sftpgo.json files.
  # It contains hardcoded credentials for the user simpipe/simpipe1234.
  env:
    SFTPGO_LOADDATA_FROM: /etc/simpipe-sftpgo.json
    SFTPGO_LOADDATA_MODE: "0"
  volumes:
    - name: simpipe-config
      secret:
        secretName: simpipe-utils-sftpgo-config
  volumeMounts:
    - name: simpipe-config
      mountPath: /etc/simpipe-sftpgo.json
      subPath: sftpgo.json
      readOnly: true

postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        username: postgres
        password: simpipe1234
        postgresPassword: simpipe1234
  architecture: standalone
  primary:
    persistence:
      size: 32Gi

cadvisor:
  enabled: true
  nameOverride: simpipe-cadvisor

  simpipeRefreshInterval: 3s
  simpipeScrapeTimeout: 2s

  container:
    additionalArgs:
      - --housekeeping_interval=3s
      - --max_housekeeping_interval=6s
      #- --docker_only
      - --event_storage_event_limit=default=0
      - --event_storage_age_limit=default=0
      - --enable_metrics=memory,cpu,process,network
      # Replace with the following line to enable disk metrics,
      # at the cost of a significant performance hit.
      #- --enable_metrics=memory,cpu,process,network,diskIO,disk
    hostPaths:
      - name: rootfs
        path: "/"
        mount: "/rootfs"
      - name: var-run
        path: "/var/run"
      - name: sys
        path: "/sys"
      - name: docker
        path: "/var/lib/docker"
      - name: disk
        path: "/dev/disk"

  extraContainers:
    - name: simpipe-cadvisor-bridge
      image: ghcr.io/datacloud-project/simpipe-cadvisor-bridge:0.3.0
      imagePullPolicy: IfNotPresent
      args:
        - http://localhost:8080/metrics
      ports:
        - name: bridge
          containerPort: 2112
          protocol: TCP

  service:
    extraPorts:
      - name: bridge
        targetPort: bridge
        port: 2112
        protocol: TCP

  #nodeSelector:
  #  node-role.kubernetes.io/worker: worker

carbontracker:
  enabled: true
  replicaCount: 1

  image:
    repository: ghcr.io/datacloud-project/sim-pipe-carbontracker
    pullPolicy: Always
    #tag: "carbontracker"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 8000

  # Probe configuration for health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  ingress:
    enabled: false
