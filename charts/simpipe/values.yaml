# Default values for simpipe.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

cadvisor:
  enabled: true
  nameOverride: simpipe-cadvisor

  container:
    additionalArgs:
      - --housekeeping_interval=1s
      - --max_housekeeping_interval=2s
      #- --docker_only
      - --event_storage_event_limit=default=0
      - --event_storage_age_limit=default=0
    hostPaths:
      - name: rootfs
        path: "/"
        mount: "/rootfs"
      - name: var-run
        path: "/var/run"
      - name: sys
        path: "/sys"
      - name: docker
        path: "/var/lib/docker"
      - name: disk
        path: "/dev/disk"

  #nodeSelector:
  #  node-role.kubernetes.io/worker: worker

timescaledb-single:
  enabled: false
  fullnameOverride: simpipe-timescaledb

  replicaCount: 1

  backup:
    enabled: false

  persistentVolumes:
    data:
      size: 32Gi

  secrets:
    credentials:
      # Consider using a safe password, and use something like sops to encrypt it.
      PATRONI_SUPERUSER_PASSWORD: "simpipe"

# Please note that PromScale is being deprecated.
# We will replace it eventually.
promscale:
  enabled: false
  fullnameOverride: simpipe-promscale

  connection:
    user: postgres
    password: simpipe
    host: simpipe-timescaledb
    port: 5432
    dbName: postgres

prometheus:
  enabled: false
  kube-state-metrics:
    enabled: false
  alertmanager:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: true

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: cadvisor
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: simpipe-cadvisor
            # - action: labelmap
            #   regex: __meta_kubernetes_pod_label_(.+)
            # - source_labels: [__meta_kubernetes_namespace]
            #   action: replace
            #   target_label: namespace
            # - source_labels: [__meta_kubernetes_pod_name]
            #   action: replace
            #   target_label: pod
          metric_relabel_configs:
            # - action: replace
            #   replacement: wololo-${1}
            #   source_labels: [__meta_kubernetes_pod_label_id, id]
            #   target_label: fuckyou
            - source_labels: [id]
              regex: "^/kubepods/(guaranteed|burstable|besteffort)/([^/]+)/([^/]+)$"
              target_label: pod
              replacement: "$2"
              action: replace
            - source_labels: [id]
              regex: "^/kubepods/(guaranteed|burstable|besteffort)/([^/]+)/([^/]+)$"
              target_label: container
              replacement: "$3"
              action: replace
            # remove label id
            - regex: "id"
              action: labeldrop

          # Scrape faster
          scrape_interval: 2s
        - job_name: "simpipe-prometheus-pushgateway"
          honor_labels: true

          kubernetes_sd_configs:
            - role: service

          relabel_configs:
            - source_labels:
                [__meta_kubernetes_service_annotation_prometheus_io_probe]
              action: keep
              regex: pushgateway
        - job_name: kubernetes-pods
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod

  # # See https://github.com/timescale/timescaledb-kubernetes/issues/394
  # # and https://github.com/timescale/timescaledb-kubernetes/issues/278#issuecomment-1104895032
  # service:
  #   primary:
  #     spec:
  #       selector:
  #         app: sandbox-toys-timescaledb
  #         cluster-name: simpipe
  #         role: master

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.23.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

kube-prometheus-stack:
  enabled: true
  kubeEtcd:
    enabled: false
  grafana:
    enabled: true
    # Actually never used
    adminPassword: simpipe
    grafana.ini:
      auth.anonymous:
        enabled: true
        org_role: Admin
        org_name: Main Org.
      auth:
        disable_login_form: true
        disable_signout_menu: true
  # Many kubernetes distributions doesn't support the hostRootFsMount feature
  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false

argo-workflows:
  enabled: true

  server:
    extraArgs:
      - --auth-mode=server

  workflow:
    serviceAccount:
      create: true

  useDefaultArtifactRepo: true
  artifactRepository:
    # TODO: recommended to use something else
    archiveLogs: true
    s3:
      bucket: artifacts
      accessKeySecret:
        name: simpipe-minio
        key: root-user
      secretKeySecret:
        name: simpipe-minio
        key: root-password
      endpoint: simpipe-minio.default.svc.cluster.local:9000
      insecure: true
      useSDKCreds: false
  controller:
    workflowDefaults:
      spec:
        parallelism: 1
    workflowWorkers: 1
    persistence:
      archive: true
      clusterName: simpipe
      postgresql:
        host: simpipe-timescaledb.default.svc.cluster.local
        port: 5432
        database: postgres
        tableName: postgres
        userNameSecret:
          name: simpipe-database-credentials
          key: username
        passwordSecret:
          name: simpipe-database-credentials
          key: password
        sslMode: disable

argo-events:
  enabled: false
  webhook:
    enabled: true

minio:
  enabled: true
  auth:
    rootUser: simpipe
    # Obviously placeholder password
    rootPassword: simpipe1234
  defaultBuckets: "artifacts,logs,registry"
  persistence:
    size: 32Gi

docker-registry:
  enabled: false
  image:
    tag: 2.8.1
  storage: s3
  secrets:
    s3:
      accessKey: simpipe
      secretKey: simpipe1234
  s3:
    bucket: registry
    region: us-east-1
    regionEndpoint: http://simpipe-minio.default.svc.cluster.local:9000/

sftpgo:
  enabled: true
  # The following configuration will load the data from the secret
  # generated by the sftp-config-secret.yaml and sftpgo.json files.
  # It contains hardcoded credentials for the user simpipe/simpipe1234.
  env:
    SFTPGO_LOADDATA_FROM: /etc/simpipe-sftpgo.json
    SFTPGO_LOADDATA_MODE: "0"
  volumes:
    - name: simpipe-config
      secret:
        secretName: simpipe-sftpgo-config
  volumeMounts:
    - name: simpipe-config
      mountPath: /etc/simpipe-sftpgo.json
      subPath: sftpgo.json
      readOnly: true

postgresql:
  enabled: false
  global:
    postgresql:
      auth:
        username: simpipe
        password: simpipe1234
        postgresPassword: simpipe1234
  architecture: standalone
  primary:
    persistence:
      size: 32Gi

timescaledb:
  enabled: true
  auth:
    postgresPassword: simpipe1234
  persistence:
    size: 32Gi
