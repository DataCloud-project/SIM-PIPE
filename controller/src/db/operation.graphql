# Get all simulations
query AllSimulations ($userid: String) {
  simulations (where: {userid: {_eq: $userid}}) {
    simulation_id
    name
    created
    pipeline_description
    runs {
      run_id
      name
      status
      created
      started
      ended
    } 
  }
}


query allRunsAndSteps ($userid: String) {
  runs (where: {userid: {_eq: $userid}}) {
    run_id
    name
    created
    started
    status
    steps {
      step_id
      created
      started
      ended
      status
    }
  }
}

query getUseridFromRun ($run_id: uuid!) {
  runs (where: {run_id: {_eq: $run_id}}) {
    userid
  }
}

query getUseridFromSimulation ($simulation_id: uuid!) {
  simulations (where: {simulation_id: {_eq: $simulation_id}}) {
    userid
  }
}

# todo add userid
query getSimulationDSL ($simulation_id: uuid!) {
  simulations(where: {simulation_id: {_eq: $simulation_id}}) {
    pipeline_description 
  }
}

# api functions ..
mutation createRun($simulation_id: uuid!, $name:String, $userid: String, $env_list: jsonb, $timeout_value:Int) {
  insert_runs_one(object: {simulation_id: $simulation_id, name: $name, userid: $userid, env_list:$env_list, timeout_value:$timeout_value}) {
    run_id
  }
}

mutation createStep($run_id: uuid!, $name: String!, $image: String!, $pipeline_step_number: Int!) {
  insert_steps_one(object: {run_id: $run_id, name:$name, image:$image, pipeline_step_number:$pipeline_step_number}){
    step_id
  }
}

mutation setStepAsStarted($step_id: Int!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {started: "now()", status: active}) {
    step_id
  }
}
mutation setStepAsEndedSuccess($step_id: Int!, $started: timestamptz!, $ended: timestamptz!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {started: $started, ended: $ended, status: completed}) {
    step_id
  }
}

mutation setStepAsCancelled($step_id: Int!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {status: cancelled}) {
    step_id
  }
}
mutation setStepAsFailed($step_id: Int!) {
  update_steps_by_pk(pk_columns: {step_id: $step_id}, _set: {status: failed}) {
    step_id
  }
}
mutation setRunAsStarted($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {started: "now()", status: active}) {
    run_id
  }
}

mutation setRunAsQueued($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {status: queued}) {
    run_id
  }
}

mutation setRunAsEndedSuccess($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {ended: "now()", status: completed}) {
    run_id
  }
}

mutation setRunAsCancelled($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {status: cancelled}) {
    run_id
  }
}
mutation setRunAsFailed($run_id: uuid!) {
  update_runs_by_pk(pk_columns: {run_id: $run_id}, _set: {status: failed}) {
    run_id
  }
}


# modified create simulation to add json string arg for pipeline description
mutation createSimulation ($name: String, $pipeline_description: jsonb, $userid: String) {
  create_simulation(object: {name: $name, pipeline_description: $pipeline_description, userid:$userid }) {
    simulation_id
  }
}

# not used
query getSimulationIdandSteps($run_id: uuid!) {
  runs(where: {run_id: {_eq: $run_id}}) {
    simulation_id
    name
    steps(order_by: {pipeline_step_number: asc}) {
      step_id
      pipeline_step_number
      image
      name
    }
  }
}
query getRunDetails($run_id: uuid!) {
  runs(where: {run_id: {_eq: $run_id}}) {
    simulation_id
    name
    env_list
    timeout_value
    steps(order_by: {pipeline_step_number: asc}) {
      step_id
      pipeline_step_number
      image
      name
    }
  }
}

mutation insertResourceUsage($cpu: numeric = "", $memory: numeric = "", $memory_max: numeric = "", $rx_value: numeric = "", $tx_value: numeric = "", $step_id: Int = 10, $time: timestamptz = "") {
  insert_simpipe_resource_usage_one(object: {cpu: $cpu, memory: $memory, memory_max: $memory_max, rx_value: $rx_value, tx_value: $tx_value, step_id: $step_id, time: $time}) {
    id
  }
}

mutation insertLog($step_id: Int, $text: String) {
  insert_simpipe_logs_one(object: {step_id: $step_id, text: $text}) {
    step_id
  }
}

query getSimulationRunResults($simulation_id: uuid = "", $run_id: uuid = "", $userid: String) {
  simulations(where: {
    _and: [
        {simulation_id: {_eq: $simulation_id}},
        {userid: {_eq: $userid}}
      ]
    }) {
    runs(where: {run_id: {_eq: $run_id}}) {
      run_id
      status
      created
      started
      ended
      steps(order_by: {pipeline_step_number: asc}) {
        step_id
        status
        created
        started
        ended
        image
        name
        pipeline_step_number
        resource_usages(order_by: {time: asc}) {
          id
          step_id
          cpu
          memory
          memory_max
          rx_value
          time
          tx_value
        }
      }
    }
  }
}

query getSimulation($simulation_id: uuid, $userid: String) {
  simulations(where: {
    _and: [
        {simulation_id: {_eq: $simulation_id}},
        {userid: {_eq: $userid}}
      ]
    }) {
    name
    simulation_id
    created
    pipeline_description
    runs {
      name
      run_id
      status
      created
      started
      ended
      steps(order_by: {pipeline_step_number: asc}) {
        step_id
        status
        created
        started
        ended
        image
        name
        pipeline_step_number
        resource_usages(order_by: {time: asc}) {
          id
          step_id
          cpu
          memory
          memory_max
          rx_value
          time
          tx_value
        }
        log {
          text
        }
      }
    }
  }
}

mutation deleteRun($run_id: uuid!) {
  # delete_runs_by_pk(object: {run_id: $run_id}) {
  delete_runs_by_pk(run_id: $run_id) {
    run_id
  }
}