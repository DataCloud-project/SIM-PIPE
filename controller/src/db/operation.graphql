query ping($_: Boolean) {
  __typename
}

query getUserIdFromRun ($runId: uuid!) {
  run (runId: $runId) {
    simulation { userId }
  }
}

query getUserIdFromSimulation ($simulationId: uuid!) {
  simulation (simulationId: $simulationId) {
    userId
  }
}

query getSimulationDSL ($simulationId: uuid!) {
  simulation(simulationId: $simulationId) {
    pipelineDescription
  }
}

# api functions ..

mutation createRun($simulationId: uuid!, $name:String!) {
  insertRunsOne(object: {simulationId: $simulationId, name: $name}) {
    runId
  }
}

mutation createStep($runId: uuid!, $name: String!, $image: String!, $pipelineStepNumber: Int!) {
  insertStepsOne(object: {runId: $runId, name:$name, image:$image, pipelineStepNumber:$pipelineStepNumber}){
    stepId
  }
}

mutation setStepAsStarted($stepId: uuid!) {
  updateStepsByPk(pk_columns: {stepId: $stepId}, _set: {started: "now()", status: ACTIVE}) {
    stepId
  }
}
mutation setStepAsEndedSuccess($stepId: uuid!, $started: timestamp!, $ended: timestamp!) {
  updateStepsByPk(pk_columns: {stepId: $stepId}, _set: {started: $started, ended: $ended, status: COMPLETED}) {
    stepId
  }
}

mutation setStepAsCancelled($stepId: uuid!) {
  updateStepsByPk(pk_columns: {stepId: $stepId}, _set: {status: CANCELLED}) {
    stepId
  }
}
mutation setStepAsFailed($stepId: uuid!) {
  updateStepsByPk(pk_columns: {stepId: $stepId}, _set: {status: FAILED}) {
    stepId
  }
}
mutation setRunAsStarted($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {started: "now()", status: ACTIVE}) {
    runId
  }
}

mutation setRunAsQueued($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {status: QUEUED}) {
    runId
  }
}

mutation setRunAsEndedSuccess($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {ended: "now()", status: COMPLETED}) {
    runId
  }
}

mutation setRunAsCancelled($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {status: CANCELLED}) {
    runId
  }
}
mutation setRunAsFailed($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {status: FAILED}) {
    runId
  }
}


# modified create simulation to add json string arg for pipeline description
mutation createSimulation ($name: String, $pipelineDescription: jsonb, $userId: String) {
  insertSimulationsOne(object: {name: $name, pipelineDescription: $pipelineDescription, userId:$userId }) {
    simulationId
  }
}

# not used
query getSimulationIdandSteps($runId: uuid!) {
  run(runId: $runId) {
    simulationId
    name
    steps(orderBy: {pipelineStepNumber: ASC}) {
      stepId
      pipelineStepNumber
      image
      name
    }
  }
}
query getRunDetails($runId: uuid!) {
  run(runId: $runId) {
    simulationId
    name
    steps(orderBy: {pipelineStepNumber: ASC}) {
      stepId
      pipelineStepNumber
      image
      name
    }
  }
}

mutation insertLog($stepId: uuid!, $text: String!) {
  insertSimpipeLogsOne(object: {stepId: $stepId, text: $text}) {
    stepId
  }
}

mutation markRunAsRunningAndStepsAsScheduled($runId: uuid!) {
  updateRunsByPk(pk_columns: {runId: $runId}, _set: {status: ACTIVE, started: "now()"}) {
    runId
  }
  updateSteps(where: {runId: {_eq: $runId}}, _set: {status: WAITING}) {
    returning {
      stepId
    }
  }
}