schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
"whether this query should be cached (Hasura Cloud only)"
directive @cached("measured in seconds" ttl: Int! = 60, "refresh the cache entry" refresh: Boolean! = false) on QUERY
"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}
"ordering argument of a cursor"
enum CursorOrdering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}
scalar Float
"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input Float8ComparisonExp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _isNull: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}
"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}
input JsonbCastExp {
  String: StringComparisonExp
}
"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
  _cast: JsonbCastExp
  "is the column contained in the given json value"
  _containedIn: jsonb
  "does the column contain the given json value at the top level"
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  "does the string exist as a top-level key in the column"
  _hasKey: String
  "do all of these strings exist as top-level keys in the column"
  _hasKeysAll: [String!]
  "do any of these strings exist as top-level keys in the column"
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}
"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _isNull: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}
"column ordering options"
enum OrderBy {
  "in ascending order, nulls last"
  ASC
  "in ascending order, nulls first"
  ASC_NULLS_FIRST
  "in ascending order, nulls last"
  ASC_NULLS_LAST
  "in descending order, nulls first"
  DESC
  "in descending order, nulls first"
  DESC_NULLS_FIRST
  "in descending order, nulls last"
  DESC_NULLS_LAST
}
type Run {
  Run: runs
  run_id: uuid
}
"""
columns and relationships of "simpipe.cpu"
"""
type SimpipeCpu {
  seriesId: bigint
  time: timestamptz
  userid: String
  value: float8
}
"""
aggregated selection of "simpipe.cpu"
"""
type SimpipeCpuAggregate {
  aggregate: SimpipeCpuAggregateFields
  nodes: [SimpipeCpu!]!
}
"""
aggregate fields of "simpipe.cpu"
"""
type SimpipeCpuAggregateFields {
  avg: SimpipeCpuAvgFields
  count(columns: [SimpipeCpuSelectColumn!], distinct: Boolean): Int!
  max: SimpipeCpuMaxFields
  min: SimpipeCpuMinFields
  stddev: SimpipeCpuStddevFields
  stddevPop: SimpipeCpuStddev_popFields
  stddevSamp: SimpipeCpuStddev_sampFields
  sum: SimpipeCpuSumFields
  varPop: SimpipeCpuVar_popFields
  varSamp: SimpipeCpuVar_sampFields
  variance: SimpipeCpuVarianceFields
}
"aggregate avg on columns"
type SimpipeCpuAvgFields {
  seriesId: Float
  value: Float
}
"""
Boolean expression to filter rows from the table "simpipe.cpu". All fields are combined with a logical 'AND'.
"""
input SimpipeCpuBoolExp {
  _and: [SimpipeCpuBoolExp!]
  _not: SimpipeCpuBoolExp
  _or: [SimpipeCpuBoolExp!]
  seriesId: BigintComparisonExp
  time: TimestamptzComparisonExp
  userid: StringComparisonExp
  value: Float8ComparisonExp
}
"aggregate max on columns"
type SimpipeCpuMaxFields {
  seriesId: bigint
  time: timestamptz
  userid: String
  value: float8
}
"aggregate min on columns"
type SimpipeCpuMinFields {
  seriesId: bigint
  time: timestamptz
  userid: String
  value: float8
}
"""
Ordering options when selecting data from "simpipe.cpu".
"""
input SimpipeCpuOrderBy {
  seriesId: OrderBy
  time: OrderBy
  userid: OrderBy
  value: OrderBy
}
"""
select columns of table "simpipe.cpu"
"""
enum SimpipeCpuSelectColumn {
  "column name"
  seriesId
  "column name"
  time
  "column name"
  userid
  "column name"
  value
}
"aggregate stddev on columns"
type SimpipeCpuStddevFields {
  seriesId: Float
  value: Float
}
"aggregate stddev_pop on columns"
type SimpipeCpuStddev_popFields {
  seriesId: Float
  value: Float
}
"aggregate stddev_samp on columns"
type SimpipeCpuStddev_sampFields {
  seriesId: Float
  value: Float
}
"""
Streaming cursor of the table "simpipe_cpu"
"""
input SimpipeCpuStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeCpuStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeCpuStreamCursorValueInput {
  seriesId: bigint
  time: timestamptz
  userid: String
  value: float8
}
"aggregate sum on columns"
type SimpipeCpuSumFields {
  seriesId: bigint
  value: float8
}
"aggregate var_pop on columns"
type SimpipeCpuVar_popFields {
  seriesId: Float
  value: Float
}
"aggregate var_samp on columns"
type SimpipeCpuVar_sampFields {
  seriesId: Float
  value: Float
}
"aggregate variance on columns"
type SimpipeCpuVarianceFields {
  seriesId: Float
  value: Float
}
"Environment variables in runs"
type SimpipeEnvs {
  envId: Int!
  name: String!
  "An object relationship"
  step: steps!
  stepId: String!
  value: String!
}
"""
aggregated selection of "simpipe.envs"
"""
type SimpipeEnvsAggregate {
  aggregate: SimpipeEnvsAggregateFields
  nodes: [SimpipeEnvs!]!
}
"""
aggregate fields of "simpipe.envs"
"""
type SimpipeEnvsAggregateFields {
  avg: SimpipeEnvsAvgFields
  count(columns: [SimpipeEnvsSelectColumn!], distinct: Boolean): Int!
  max: SimpipeEnvsMaxFields
  min: SimpipeEnvsMinFields
  stddev: SimpipeEnvsStddevFields
  stddevPop: SimpipeEnvsStddev_popFields
  stddevSamp: SimpipeEnvsStddev_sampFields
  sum: SimpipeEnvsSumFields
  varPop: SimpipeEnvsVar_popFields
  varSamp: SimpipeEnvsVar_sampFields
  variance: SimpipeEnvsVarianceFields
}
"""
order by aggregate values of table "simpipe.envs"
"""
input SimpipeEnvsAggregateOrderBy {
  avg: simpipe_envs_avg_order_by
  count: OrderBy
  max: simpipe_envs_max_order_by
  min: simpipe_envs_min_order_by
  stddev: simpipe_envs_stddev_order_by
  stddev_pop: simpipe_envs_stddev_pop_order_by
  stddev_samp: simpipe_envs_stddev_samp_order_by
  sum: simpipe_envs_sum_order_by
  var_pop: simpipe_envs_var_pop_order_by
  var_samp: simpipe_envs_var_samp_order_by
  variance: simpipe_envs_variance_order_by
}
"""
input type for inserting array relation for remote table "simpipe.envs"
"""
input SimpipeEnvsArrRelInsertInput {
  data: [SimpipeEnvsInsertInput!]!
  "upsert condition"
  onConflict: SimpipeEnvsOnConflict
}
"aggregate avg on columns"
type SimpipeEnvsAvgFields {
  envId: Float
  stepId: Float
}
"""
Boolean expression to filter rows from the table "simpipe.envs". All fields are combined with a logical 'AND'.
"""
input SimpipeEnvsBoolExp {
  _and: [SimpipeEnvsBoolExp!]
  _not: SimpipeEnvsBoolExp
  _or: [SimpipeEnvsBoolExp!]
  envId: IntComparisonExp
  name: StringComparisonExp
  step: stepsBoolExp
  stepId: StringComparisonExp
  value: StringComparisonExp
}
"""
unique or primary key constraints on table "simpipe.envs"
"""
enum SimpipeEnvsConstraint {
  """
  unique or primary key constraint on columns "env_id"
  """
  envs_pkey
  """
  unique or primary key constraint on columns "name", "step_id"
  """
  envs_step_id_name_key
}
"""
input type for incrementing numeric columns in table "simpipe.envs"
"""
input SimpipeEnvsIncInput {
  envId: Int
  stepId: uuid
}
"""
input type for inserting data into table "simpipe.envs"
"""
input SimpipeEnvsInsertInput {
  envId: Int
  name: String
  step: stepsObjRelInsertInput
  stepId: uuid
  value: String
}
"aggregate max on columns"
type SimpipeEnvsMaxFields {
  envId: Int
  name: String
  stepId: uuid
  value: String
}
"aggregate min on columns"
type SimpipeEnvsMinFields {
  envId: Int
  name: String
  stepId: uuid
  value: String
}
"""
response of any mutation on the table "simpipe.envs"
"""
type SimpipeEnvsMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SimpipeEnvs!]!
}
"""
on_conflict condition type for table "simpipe.envs"
"""
input SimpipeEnvsOnConflict {
  constraint: SimpipeEnvsConstraint!
  update_columns: [SimpipeEnvsUpdateColumn!]! = []
  where: SimpipeEnvsBoolExp
}
"""
Ordering options when selecting data from "simpipe.envs".
"""
input SimpipeEnvsOrderBy {
  envId: OrderBy
  name: OrderBy
  step: stepsOrderBy
  stepId: OrderBy
  value: OrderBy
}
"primary key columns input for table: simpipe.envs"
input SimpipeEnvsPkColumnsInput {
  envId: Int!
}
"""
select columns of table "simpipe.envs"
"""
enum SimpipeEnvsSelectColumn {
  "column name"
  envId
  "column name"
  name
  "column name"
  stepId
  "column name"
  value
}
"""
input type for updating data in table "simpipe.envs"
"""
input SimpipeEnvsSetInput {
  envId: Int
  name: String
  stepId: uuid
  value: String
}
"aggregate stddev on columns"
type SimpipeEnvsStddevFields {
  envId: Float
  stepId: Float
}
"aggregate stddev_pop on columns"
type SimpipeEnvsStddev_popFields {
  envId: Float
  stepId: Float
}
"aggregate stddev_samp on columns"
type SimpipeEnvsStddev_sampFields {
  envId: Float
  stepId: Float
}
"""
Streaming cursor of the table "simpipe_envs"
"""
input SimpipeEnvsStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeEnvsStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeEnvsStreamCursorValueInput {
  envId: Int
  name: String
  stepId: uuid
  value: String
}
"aggregate sum on columns"
type SimpipeEnvsSumFields {
  envId: Int
  stepId: uuid
}
"""
update columns of table "simpipe.envs"
"""
enum SimpipeEnvsUpdateColumn {
  "column name"
  envId
  "column name"
  name
  "column name"
  stepId
  "column name"
  value
}
input SimpipeEnvsUpdates {
  "increments the numeric columns with given value of the filtered values"
  _inc: SimpipeEnvsIncInput
  "sets the columns of the filtered rows to the given values"
  _set: SimpipeEnvsSetInput
  "filter the rows which have to be updated"
  where: SimpipeEnvsBoolExp!
}
"aggregate var_pop on columns"
type SimpipeEnvsVar_popFields {
  envId: Float
  stepId: Float
}
"aggregate var_samp on columns"
type SimpipeEnvsVar_sampFields {
  envId: Float
  stepId: Float
}
"aggregate variance on columns"
type SimpipeEnvsVarianceFields {
  envId: Float
  stepId: Float
}
"""
columns and relationships of "simpipe.logs"
"""
type SimpipeLogs {
  "An object relationship"
  step: steps!
  stepId: uuid!
  text: String!
}
"""
aggregated selection of "simpipe.logs"
"""
type SimpipeLogsAggregate {
  aggregate: SimpipeLogsAggregateFields
  nodes: [SimpipeLogs!]!
}
"""
aggregate fields of "simpipe.logs"
"""
type SimpipeLogsAggregateFields {
  avg: SimpipeLogsAvgFields
  count(columns: [SimpipeLogsSelectColumn!], distinct: Boolean): Int!
  max: SimpipeLogsMaxFields
  min: SimpipeLogsMinFields
  stddev: SimpipeLogsStddevFields
  stddevPop: SimpipeLogsStddev_popFields
  stddevSamp: SimpipeLogsStddev_sampFields
  sum: SimpipeLogsSumFields
  varPop: SimpipeLogsVar_popFields
  varSamp: SimpipeLogsVar_sampFields
  variance: SimpipeLogsVarianceFields
}
"aggregate avg on columns"
type SimpipeLogsAvgFields {
  stepId: Float
}
"""
Boolean expression to filter rows from the table "simpipe.logs". All fields are combined with a logical 'AND'.
"""
input SimpipeLogsBoolExp {
  _and: [SimpipeLogsBoolExp!]
  _not: SimpipeLogsBoolExp
  _or: [SimpipeLogsBoolExp!]
  step: stepsBoolExp
  stepId: StringComparisonExp
  text: StringComparisonExp
}
"""
unique or primary key constraints on table "simpipe.logs"
"""
enum SimpipeLogsConstraint {
  """
  unique or primary key constraint on columns "step_id"
  """
  logs_pkey
}
"""
input type for incrementing numeric columns in table "simpipe.logs"
"""
input SimpipeLogsIncInput {
  stepId: uuid
}
"""
input type for inserting data into table "simpipe.logs"
"""
input SimpipeLogsInsertInput {
  step: stepsObjRelInsertInput
  stepId: uuid
  text: String
}
"aggregate max on columns"
type SimpipeLogsMaxFields {
  stepId: uuid
  text: String
}
"aggregate min on columns"
type SimpipeLogsMinFields {
  stepId: uuid
  text: String
}
"""
response of any mutation on the table "simpipe.logs"
"""
type SimpipeLogsMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SimpipeLogs!]!
}
"""
input type for inserting object relation for remote table "simpipe.logs"
"""
input SimpipeLogsObjRelInsertInput {
  data: SimpipeLogsInsertInput!
  "upsert condition"
  onConflict: SimpipeLogsOnConflict
}
"""
on_conflict condition type for table "simpipe.logs"
"""
input SimpipeLogsOnConflict {
  constraint: SimpipeLogsConstraint!
  update_columns: [SimpipeLogsUpdateColumn!]! = []
  where: SimpipeLogsBoolExp
}
"""
Ordering options when selecting data from "simpipe.logs".
"""
input SimpipeLogsOrderBy {
  step: stepsOrderBy
  stepId: OrderBy
  text: OrderBy
}
"primary key columns input for table: simpipe.logs"
input SimpipeLogsPkColumnsInput {
  stepId: uuid!
}
"""
select columns of table "simpipe.logs"
"""
enum SimpipeLogsSelectColumn {
  "column name"
  stepId
  "column name"
  text
}
"""
input type for updating data in table "simpipe.logs"
"""
input SimpipeLogsSetInput {
  stepId: uuid
  text: String
}
"aggregate stddev on columns"
type SimpipeLogsStddevFields {
  stepId: Float
}
"aggregate stddev_pop on columns"
type SimpipeLogsStddev_popFields {
  stepId: Float
}
"aggregate stddev_samp on columns"
type SimpipeLogsStddev_sampFields {
  stepId: Float
}
"""
Streaming cursor of the table "simpipe_logs"
"""
input SimpipeLogsStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeLogsStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeLogsStreamCursorValueInput {
  stepId: uuid
  text: String
}
"aggregate sum on columns"
type SimpipeLogsSumFields {
  stepId: uuid
}
"""
update columns of table "simpipe.logs"
"""
enum SimpipeLogsUpdateColumn {
  "column name"
  stepId
  "column name"
  text
}
input SimpipeLogsUpdates {
  "increments the numeric columns with given value of the filtered values"
  _inc: SimpipeLogsIncInput
  "sets the columns of the filtered rows to the given values"
  _set: SimpipeLogsSetInput
  "filter the rows which have to be updated"
  where: SimpipeLogsBoolExp!
}
"aggregate var_pop on columns"
type SimpipeLogsVar_popFields {
  stepId: Float
}
"aggregate var_samp on columns"
type SimpipeLogsVar_sampFields {
  stepId: Float
}
"aggregate variance on columns"
type SimpipeLogsVarianceFields {
  stepId: Float
}
"""
columns and relationships of "simpipe.resource_usage"
"""
type SimpipeResourceUsage {
  cpu: numeric!
  id: bigint!
  memory: numeric!
  memoryMax: numeric!
  rxValue: numeric!
  "An object relationship"
  step: steps!
  stepId: uuid!
  time: timestamptz!
  txValue: numeric!
}
"""
aggregated selection of "simpipe.resource_usage"
"""
type SimpipeResourceUsageAggregate {
  aggregate: SimpipeResourceUsageAggregateFields
  nodes: [SimpipeResourceUsage!]!
}
"""
aggregate fields of "simpipe.resource_usage"
"""
type SimpipeResourceUsageAggregateFields {
  avg: SimpipeResourceUsageAvgFields
  count(columns: [SimpipeResourceUsageSelectColumn!], distinct: Boolean): Int!
  max: SimpipeResourceUsageMaxFields
  min: SimpipeResourceUsageMinFields
  stddev: SimpipeResourceUsageStddevFields
  stddevPop: SimpipeResourceUsageStddev_popFields
  stddevSamp: SimpipeResourceUsageStddev_sampFields
  sum: SimpipeResourceUsageSumFields
  varPop: SimpipeResourceUsageVar_popFields
  varSamp: SimpipeResourceUsageVar_sampFields
  variance: SimpipeResourceUsageVarianceFields
}
"""
order by aggregate values of table "simpipe.resource_usage"
"""
input SimpipeResourceUsageAggregateOrderBy {
  avg: simpipe_resource_usage_avg_order_by
  count: OrderBy
  max: simpipe_resource_usage_max_order_by
  min: simpipe_resource_usage_min_order_by
  stddev: simpipe_resource_usage_stddev_order_by
  stddev_pop: simpipe_resource_usage_stddev_pop_order_by
  stddev_samp: simpipe_resource_usage_stddev_samp_order_by
  sum: simpipe_resource_usage_sum_order_by
  var_pop: simpipe_resource_usage_var_pop_order_by
  var_samp: simpipe_resource_usage_var_samp_order_by
  variance: simpipe_resource_usage_variance_order_by
}
"""
input type for inserting array relation for remote table "simpipe.resource_usage"
"""
input SimpipeResourceUsageArrRelInsertInput {
  data: [SimpipeResourceUsageInsertInput!]!
  "upsert condition"
  onConflict: SimpipeResourceUsageOnConflict
}
"aggregate avg on columns"
type SimpipeResourceUsageAvgFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"""
Boolean expression to filter rows from the table "simpipe.resource_usage". All fields are combined with a logical 'AND'.
"""
input SimpipeResourceUsageBoolExp {
  _and: [SimpipeResourceUsageBoolExp!]
  _not: SimpipeResourceUsageBoolExp
  _or: [SimpipeResourceUsageBoolExp!]
  cpu: NumericComparisonExp
  id: BigintComparisonExp
  memory: NumericComparisonExp
  memoryMax: NumericComparisonExp
  rxValue: NumericComparisonExp
  step: stepsBoolExp
  stepId: StringComparisonExp
  time: TimestamptzComparisonExp
  txValue: NumericComparisonExp
}
"""
unique or primary key constraints on table "simpipe.resource_usage"
"""
enum SimpipeResourceUsageConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  resource_usage_pkey
}
"""
input type for incrementing numeric columns in table "simpipe.resource_usage"
"""
input SimpipeResourceUsageIncInput {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  txValue: numeric
}
"""
input type for inserting data into table "simpipe.resource_usage"
"""
input SimpipeResourceUsageInsertInput {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  step: stepsObjRelInsertInput
  stepId: uuid
  time: timestamptz
  txValue: numeric
}
"aggregate max on columns"
type SimpipeResourceUsageMaxFields {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  time: timestamptz
  txValue: numeric
}
"aggregate min on columns"
type SimpipeResourceUsageMinFields {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  time: timestamptz
  txValue: numeric
}
"""
response of any mutation on the table "simpipe.resource_usage"
"""
type SimpipeResourceUsageMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SimpipeResourceUsage!]!
}
"""
on_conflict condition type for table "simpipe.resource_usage"
"""
input SimpipeResourceUsageOnConflict {
  constraint: SimpipeResourceUsageConstraint!
  update_columns: [SimpipeResourceUsageUpdateColumn!]! = []
  where: SimpipeResourceUsageBoolExp
}
"""
Ordering options when selecting data from "simpipe.resource_usage".
"""
input SimpipeResourceUsageOrderBy {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  step: stepsOrderBy
  stepId: OrderBy
  time: OrderBy
  txValue: OrderBy
}
"primary key columns input for table: simpipe.resource_usage"
input SimpipeResourceUsagePkColumnsInput {
  id: bigint!
}
"""
select columns of table "simpipe.resource_usage"
"""
enum SimpipeResourceUsageSelectColumn {
  "column name"
  cpu
  "column name"
  id
  "column name"
  memory
  "column name"
  memoryMax
  "column name"
  rxValue
  "column name"
  stepId
  "column name"
  time
  "column name"
  txValue
}
"""
input type for updating data in table "simpipe.resource_usage"
"""
input SimpipeResourceUsageSetInput {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  time: timestamptz
  txValue: numeric
}
"aggregate stddev on columns"
type SimpipeResourceUsageStddevFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"aggregate stddev_pop on columns"
type SimpipeResourceUsageStddev_popFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"aggregate stddev_samp on columns"
type SimpipeResourceUsageStddev_sampFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"""
Streaming cursor of the table "simpipe_resource_usage"
"""
input SimpipeResourceUsageStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeResourceUsageStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeResourceUsageStreamCursorValueInput {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  time: timestamptz
  txValue: numeric
}
"aggregate sum on columns"
type SimpipeResourceUsageSumFields {
  cpu: numeric
  id: bigint
  memory: numeric
  memoryMax: numeric
  rxValue: numeric
  stepId: uuid
  txValue: numeric
}
"""
update columns of table "simpipe.resource_usage"
"""
enum SimpipeResourceUsageUpdateColumn {
  "column name"
  cpu
  "column name"
  id
  "column name"
  memory
  "column name"
  memoryMax
  "column name"
  rxValue
  "column name"
  stepId
  "column name"
  time
  "column name"
  txValue
}
input SimpipeResourceUsageUpdates {
  "increments the numeric columns with given value of the filtered values"
  _inc: SimpipeResourceUsageIncInput
  "sets the columns of the filtered rows to the given values"
  _set: SimpipeResourceUsageSetInput
  "filter the rows which have to be updated"
  where: SimpipeResourceUsageBoolExp!
}
"aggregate var_pop on columns"
type SimpipeResourceUsageVar_popFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"aggregate var_samp on columns"
type SimpipeResourceUsageVar_sampFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"aggregate variance on columns"
type SimpipeResourceUsageVarianceFields {
  cpu: Float
  id: Float
  memory: Float
  memoryMax: Float
  rxValue: Float
  stepId: Float
  txValue: Float
}
"""
columns and relationships of "simpipe.run_status"
"""
type SimpipeRunStatus {
  value: String!
}
"""
aggregated selection of "simpipe.run_status"
"""
type SimpipeRunStatusAggregate {
  aggregate: SimpipeRunStatusAggregateFields
  nodes: [SimpipeRunStatus!]!
}
"""
aggregate fields of "simpipe.run_status"
"""
type SimpipeRunStatusAggregateFields {
  count(columns: [SimpipeRunStatusSelectColumn!], distinct: Boolean): Int!
  max: SimpipeRunStatusMaxFields
  min: SimpipeRunStatusMinFields
}
"""
Boolean expression to filter rows from the table "simpipe.run_status". All fields are combined with a logical 'AND'.
"""
input SimpipeRunStatusBoolExp {
  _and: [SimpipeRunStatusBoolExp!]
  _not: SimpipeRunStatusBoolExp
  _or: [SimpipeRunStatusBoolExp!]
  value: StringComparisonExp
}
"""
unique or primary key constraints on table "simpipe.run_status"
"""
enum SimpipeRunStatusConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  run_status_pkey
}
enum SimpipeRunStatusEnum {
  ACTIVE
  CANCELLED
  COMPLETED
  FAILED
  QUEUED
  WAITING
}
"""
Boolean expression to compare columns of type "SimpipeRunStatusEnum". All fields are combined with logical 'AND'.
"""
input SimpipeRunStatusEnumComparisonExp {
  _eq: SimpipeRunStatusEnum
  _in: [SimpipeRunStatusEnum!]
  _isNull: Boolean
  _neq: SimpipeRunStatusEnum
  _nin: [SimpipeRunStatusEnum!]
}
"""
input type for inserting data into table "simpipe.run_status"
"""
input SimpipeRunStatusInsertInput {
  value: String
}
"aggregate max on columns"
type SimpipeRunStatusMaxFields {
  value: String
}
"aggregate min on columns"
type SimpipeRunStatusMinFields {
  value: String
}
"""
response of any mutation on the table "simpipe.run_status"
"""
type SimpipeRunStatusMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SimpipeRunStatus!]!
}
"""
on_conflict condition type for table "simpipe.run_status"
"""
input SimpipeRunStatusOnConflict {
  constraint: SimpipeRunStatusConstraint!
  update_columns: [SimpipeRunStatusUpdateColumn!]! = []
  where: SimpipeRunStatusBoolExp
}
"""
Ordering options when selecting data from "simpipe.run_status".
"""
input SimpipeRunStatusOrderBy {
  value: OrderBy
}
"primary key columns input for table: simpipe.run_status"
input SimpipeRunStatusPkColumnsInput {
  value: String!
}
"""
select columns of table "simpipe.run_status"
"""
enum SimpipeRunStatusSelectColumn {
  "column name"
  value
}
"""
input type for updating data in table "simpipe.run_status"
"""
input SimpipeRunStatusSetInput {
  value: String
}
"""
Streaming cursor of the table "simpipe_run_status"
"""
input SimpipeRunStatusStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeRunStatusStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeRunStatusStreamCursorValueInput {
  value: String
}
"""
update columns of table "simpipe.run_status"
"""
enum SimpipeRunStatusUpdateColumn {
  "column name"
  value
}
input SimpipeRunStatusUpdates {
  "sets the columns of the filtered rows to the given values"
  _set: SimpipeRunStatusSetInput
  "filter the rows which have to be updated"
  where: SimpipeRunStatusBoolExp!
}
"""
columns and relationships of "simpipe.step_status"
"""
type SimpipeStepStatus {
  value: String!
}
"""
aggregated selection of "simpipe.step_status"
"""
type SimpipeStepStatusAggregate {
  aggregate: SimpipeStepStatusAggregateFields
  nodes: [SimpipeStepStatus!]!
}
"""
aggregate fields of "simpipe.step_status"
"""
type SimpipeStepStatusAggregateFields {
  count(columns: [SimpipeStepStatusSelectColumn!], distinct: Boolean): Int!
  max: SimpipeStepStatusMaxFields
  min: SimpipeStepStatusMinFields
}
"""
Boolean expression to filter rows from the table "simpipe.step_status". All fields are combined with a logical 'AND'.
"""
input SimpipeStepStatusBoolExp {
  _and: [SimpipeStepStatusBoolExp!]
  _not: SimpipeStepStatusBoolExp
  _or: [SimpipeStepStatusBoolExp!]
  value: StringComparisonExp
}
"""
unique or primary key constraints on table "simpipe.step_status"
"""
enum SimpipeStepStatusConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  step_status_pkey
}
enum SimpipeStepStatusEnum {
  ACTIVE
  CANCELLED
  COMPLETED
  FAILED
  WAITING
}
"""
Boolean expression to compare columns of type "SimpipeStepStatusEnum". All fields are combined with logical 'AND'.
"""
input SimpipeStepStatusEnumComparisonExp {
  _eq: SimpipeStepStatusEnum
  _in: [SimpipeStepStatusEnum!]
  _isNull: Boolean
  _neq: SimpipeStepStatusEnum
  _nin: [SimpipeStepStatusEnum!]
}
"""
input type for inserting data into table "simpipe.step_status"
"""
input SimpipeStepStatusInsertInput {
  value: String
}
"aggregate max on columns"
type SimpipeStepStatusMaxFields {
  value: String
}
"aggregate min on columns"
type SimpipeStepStatusMinFields {
  value: String
}
"""
response of any mutation on the table "simpipe.step_status"
"""
type SimpipeStepStatusMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SimpipeStepStatus!]!
}
"""
on_conflict condition type for table "simpipe.step_status"
"""
input SimpipeStepStatusOnConflict {
  constraint: SimpipeStepStatusConstraint!
  update_columns: [SimpipeStepStatusUpdateColumn!]! = []
  where: SimpipeStepStatusBoolExp
}
"""
Ordering options when selecting data from "simpipe.step_status".
"""
input SimpipeStepStatusOrderBy {
  value: OrderBy
}
"primary key columns input for table: simpipe.step_status"
input SimpipeStepStatusPkColumnsInput {
  value: String!
}
"""
select columns of table "simpipe.step_status"
"""
enum SimpipeStepStatusSelectColumn {
  "column name"
  value
}
"""
input type for updating data in table "simpipe.step_status"
"""
input SimpipeStepStatusSetInput {
  value: String
}
"""
Streaming cursor of the table "simpipe_step_status"
"""
input SimpipeStepStatusStreamCursorInput {
  "Stream column input with initial value"
  initialValue: SimpipeStepStatusStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input SimpipeStepStatusStreamCursorValueInput {
  value: String
}
"""
update columns of table "simpipe.step_status"
"""
enum SimpipeStepStatusUpdateColumn {
  "column name"
  value
}
input SimpipeStepStatusUpdates {
  "sets the columns of the filtered rows to the given values"
  _set: SimpipeStepStatusSetInput
  "filter the rows which have to be updated"
  where: SimpipeStepStatusBoolExp!
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _isNull: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}
"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
scalar uuid
"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input UuidComparisonExp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _isNull: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
scalar bigint
scalar float8
scalar jsonb
"mutation root"
type mutation_root {
  Create_Run_WithInput(env_list: [[String]], name: String, sampleInput: [[String]], simulation_id: String, timeout_values: [Int]): Run
  Start_Run(run_id: uuid): Run
  Stop_Run(run_id: uuid): Run
  """
  insert a single row into the table: "simpipe.simulations"
  """
  createSimulation("the row to be inserted" object: simulationsInsertInput!, "upsert condition" onConflict: simulationsOnConflict): simulations
  """
  insert data into the table: "simpipe.simulations"
  """
  createSimulations("the rows to be inserted" objects: [simulationsInsertInput!]!, "upsert condition" onConflict: simulationsOnConflict): simulationsMutationResponse
  """
  delete data from the table: "simpipe.runs"
  """
  deleteRuns("filter the rows which have to be deleted" where: runsBoolExp!): runsMutationResponse
  """
  delete single row from the table: "simpipe.runs"
  """
  deleteRunsByPk(runId: uuid!): runs
  """
  delete data from the table: "simpipe.envs"
  """
  deleteSimpipeEnvs("filter the rows which have to be deleted" where: SimpipeEnvsBoolExp!): SimpipeEnvsMutationResponse
  """
  delete single row from the table: "simpipe.envs"
  """
  deleteSimpipeEnvsByPk(envId: Int!): SimpipeEnvs
  """
  delete data from the table: "simpipe.logs"
  """
  deleteSimpipeLogs("filter the rows which have to be deleted" where: SimpipeLogsBoolExp!): SimpipeLogsMutationResponse
  """
  delete single row from the table: "simpipe.logs"
  """
  deleteSimpipeLogsByPk(stepId: uuid!): SimpipeLogs
  """
  delete data from the table: "simpipe.resource_usage"
  """
  deleteSimpipeResourceUsage("filter the rows which have to be deleted" where: SimpipeResourceUsageBoolExp!): SimpipeResourceUsageMutationResponse
  """
  delete single row from the table: "simpipe.resource_usage"
  """
  deleteSimpipeResourceUsageByPk(id: bigint!): SimpipeResourceUsage
  """
  delete data from the table: "simpipe.run_status"
  """
  deleteSimpipeRunStatus("filter the rows which have to be deleted" where: SimpipeRunStatusBoolExp!): SimpipeRunStatusMutationResponse
  """
  delete single row from the table: "simpipe.run_status"
  """
  deleteSimpipeRunStatusByPk(value: String!): SimpipeRunStatus
  """
  delete data from the table: "simpipe.step_status"
  """
  deleteSimpipeStepStatus("filter the rows which have to be deleted" where: SimpipeStepStatusBoolExp!): SimpipeStepStatusMutationResponse
  """
  delete single row from the table: "simpipe.step_status"
  """
  deleteSimpipeStepStatusByPk(value: String!): SimpipeStepStatus
  """
  delete single row from the table: "simpipe.simulations"
  """
  deleteSimulation("uuid of the simulation" simulationId: uuid!): simulations
  """
  delete data from the table: "simpipe.simulations"
  """
  deleteSimulations("filter the rows which have to be deleted" where: simulationsBoolExp!): simulationsMutationResponse
  """
  delete data from the table: "simpipe.steps"
  """
  deleteSteps("filter the rows which have to be deleted" where: stepsBoolExp!): stepsMutationResponse
  """
  delete single row from the table: "simpipe.steps"
  """
  deleteStepsByPk(stepId: uuid!): steps
  """
  insert data into the table: "simpipe.runs"
  """
  insertRuns("the rows to be inserted" objects: [runsInsertInput!]!, "upsert condition" onConflict: runsOnConflict): runsMutationResponse
  """
  insert a single row into the table: "simpipe.runs"
  """
  insertRunsOne("the row to be inserted" object: runsInsertInput!, "upsert condition" onConflict: runsOnConflict): runs
  """
  insert data into the table: "simpipe.envs"
  """
  insertSimpipeEnvs("the rows to be inserted" objects: [SimpipeEnvsInsertInput!]!, "upsert condition" onConflict: SimpipeEnvsOnConflict): SimpipeEnvsMutationResponse
  """
  insert a single row into the table: "simpipe.envs"
  """
  insertSimpipeEnvsOne("the row to be inserted" object: SimpipeEnvsInsertInput!, "upsert condition" onConflict: SimpipeEnvsOnConflict): SimpipeEnvs
  """
  insert data into the table: "simpipe.logs"
  """
  insertSimpipeLogs("the rows to be inserted" objects: [SimpipeLogsInsertInput!]!, "upsert condition" onConflict: SimpipeLogsOnConflict): SimpipeLogsMutationResponse
  """
  insert a single row into the table: "simpipe.logs"
  """
  insertSimpipeLogsOne("the row to be inserted" object: SimpipeLogsInsertInput!, "upsert condition" onConflict: SimpipeLogsOnConflict): SimpipeLogs
  """
  insert data into the table: "simpipe.resource_usage"
  """
  insertSimpipeResourceUsage("the rows to be inserted" objects: [SimpipeResourceUsageInsertInput!]!, "upsert condition" onConflict: SimpipeResourceUsageOnConflict): SimpipeResourceUsageMutationResponse
  """
  insert a single row into the table: "simpipe.resource_usage"
  """
  insertSimpipeResourceUsageOne("the row to be inserted" object: SimpipeResourceUsageInsertInput!, "upsert condition" onConflict: SimpipeResourceUsageOnConflict): SimpipeResourceUsage
  """
  insert data into the table: "simpipe.run_status"
  """
  insertSimpipeRunStatus("the rows to be inserted" objects: [SimpipeRunStatusInsertInput!]!, "upsert condition" onConflict: SimpipeRunStatusOnConflict): SimpipeRunStatusMutationResponse
  """
  insert a single row into the table: "simpipe.run_status"
  """
  insertSimpipeRunStatusOne("the row to be inserted" object: SimpipeRunStatusInsertInput!, "upsert condition" onConflict: SimpipeRunStatusOnConflict): SimpipeRunStatus
  """
  insert data into the table: "simpipe.step_status"
  """
  insertSimpipeStepStatus("the rows to be inserted" objects: [SimpipeStepStatusInsertInput!]!, "upsert condition" onConflict: SimpipeStepStatusOnConflict): SimpipeStepStatusMutationResponse
  """
  insert a single row into the table: "simpipe.step_status"
  """
  insertSimpipeStepStatusOne("the row to be inserted" object: SimpipeStepStatusInsertInput!, "upsert condition" onConflict: SimpipeStepStatusOnConflict): SimpipeStepStatus
  """
  insert data into the table: "simpipe.steps"
  """
  insertSteps("the rows to be inserted" objects: [stepsInsertInput!]!, "upsert condition" onConflict: stepsOnConflict): stepsMutationResponse
  """
  insert a single row into the table: "simpipe.steps"
  """
  insertStepsOne("the row to be inserted" object: stepsInsertInput!, "upsert condition" onConflict: stepsOnConflict): steps
  """
  update data of the table: "simpipe.runs"
  """
  updateRuns("sets the columns of the filtered rows to the given values" _set: runsSetInput, "filter the rows which have to be updated" where: runsBoolExp!): runsMutationResponse
  """
  update single row of the table: "simpipe.runs"
  """
  updateRunsByPk("sets the columns of the filtered rows to the given values" _set: runsSetInput, pk_columns: runsPkColumnsInput!): runs
  """
  update multiples rows of table: "simpipe.runs"
  """
  updateRunsMany("updates to execute, in order" updates: [runsUpdates!]!): [runsMutationResponse]
  """
  update data of the table: "simpipe.envs"
  """
  updateSimpipeEnvs("increments the numeric columns with given value of the filtered values" _inc: SimpipeEnvsIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeEnvsSetInput, "filter the rows which have to be updated" where: SimpipeEnvsBoolExp!): SimpipeEnvsMutationResponse
  """
  update single row of the table: "simpipe.envs"
  """
  updateSimpipeEnvsByPk("increments the numeric columns with given value of the filtered values" _inc: SimpipeEnvsIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeEnvsSetInput, pk_columns: SimpipeEnvsPkColumnsInput!): SimpipeEnvs
  """
  update multiples rows of table: "simpipe.envs"
  """
  updateSimpipeEnvsMany("updates to execute, in order" updates: [SimpipeEnvsUpdates!]!): [SimpipeEnvsMutationResponse]
  """
  update data of the table: "simpipe.logs"
  """
  updateSimpipeLogs("increments the numeric columns with given value of the filtered values" _inc: SimpipeLogsIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeLogsSetInput, "filter the rows which have to be updated" where: SimpipeLogsBoolExp!): SimpipeLogsMutationResponse
  """
  update single row of the table: "simpipe.logs"
  """
  updateSimpipeLogsByPk("increments the numeric columns with given value of the filtered values" _inc: SimpipeLogsIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeLogsSetInput, pk_columns: SimpipeLogsPkColumnsInput!): SimpipeLogs
  """
  update multiples rows of table: "simpipe.logs"
  """
  updateSimpipeLogsMany("updates to execute, in order" updates: [SimpipeLogsUpdates!]!): [SimpipeLogsMutationResponse]
  """
  update data of the table: "simpipe.resource_usage"
  """
  updateSimpipeResourceUsage("increments the numeric columns with given value of the filtered values" _inc: SimpipeResourceUsageIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeResourceUsageSetInput, "filter the rows which have to be updated" where: SimpipeResourceUsageBoolExp!): SimpipeResourceUsageMutationResponse
  """
  update single row of the table: "simpipe.resource_usage"
  """
  updateSimpipeResourceUsageByPk("increments the numeric columns with given value of the filtered values" _inc: SimpipeResourceUsageIncInput, "sets the columns of the filtered rows to the given values" _set: SimpipeResourceUsageSetInput, pk_columns: SimpipeResourceUsagePkColumnsInput!): SimpipeResourceUsage
  """
  update multiples rows of table: "simpipe.resource_usage"
  """
  updateSimpipeResourceUsageMany("updates to execute, in order" updates: [SimpipeResourceUsageUpdates!]!): [SimpipeResourceUsageMutationResponse]
  """
  update data of the table: "simpipe.run_status"
  """
  updateSimpipeRunStatus("sets the columns of the filtered rows to the given values" _set: SimpipeRunStatusSetInput, "filter the rows which have to be updated" where: SimpipeRunStatusBoolExp!): SimpipeRunStatusMutationResponse
  """
  update single row of the table: "simpipe.run_status"
  """
  updateSimpipeRunStatusByPk("sets the columns of the filtered rows to the given values" _set: SimpipeRunStatusSetInput, pk_columns: SimpipeRunStatusPkColumnsInput!): SimpipeRunStatus
  """
  update multiples rows of table: "simpipe.run_status"
  """
  updateSimpipeRunStatusMany("updates to execute, in order" updates: [SimpipeRunStatusUpdates!]!): [SimpipeRunStatusMutationResponse]
  """
  update data of the table: "simpipe.step_status"
  """
  updateSimpipeStepStatus("sets the columns of the filtered rows to the given values" _set: SimpipeStepStatusSetInput, "filter the rows which have to be updated" where: SimpipeStepStatusBoolExp!): SimpipeStepStatusMutationResponse
  """
  update single row of the table: "simpipe.step_status"
  """
  updateSimpipeStepStatusByPk("sets the columns of the filtered rows to the given values" _set: SimpipeStepStatusSetInput, pk_columns: SimpipeStepStatusPkColumnsInput!): SimpipeStepStatus
  """
  update multiples rows of table: "simpipe.step_status"
  """
  updateSimpipeStepStatusMany("updates to execute, in order" updates: [SimpipeStepStatusUpdates!]!): [SimpipeStepStatusMutationResponse]
  """
  update single row of the table: "simpipe.simulations"
  """
  updateSimulation("append existing jsonb value of filtered columns with new jsonb value" _append: simulationsAppendInput, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _deleteAtPath: simulationsDeleteAtPathInput, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _deleteElem: simulationsDeleteElemInput, "delete key/value pair or string element. key/value pairs are matched based on their key value" _deleteKey: simulationsDeleteKeyInput, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: simulationsPrependInput, "sets the columns of the filtered rows to the given values" _set: simulationsSetInput, pk_columns: simulationsPkColumnsInput!): simulations
  """
  update data of the table: "simpipe.simulations"
  """
  updateSimulations("append existing jsonb value of filtered columns with new jsonb value" _append: simulationsAppendInput, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _deleteAtPath: simulationsDeleteAtPathInput, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _deleteElem: simulationsDeleteElemInput, "delete key/value pair or string element. key/value pairs are matched based on their key value" _deleteKey: simulationsDeleteKeyInput, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: simulationsPrependInput, "sets the columns of the filtered rows to the given values" _set: simulationsSetInput, "filter the rows which have to be updated" where: simulationsBoolExp!): simulationsMutationResponse
  """
  update multiples rows of table: "simpipe.simulations"
  """
  updateSimulationsMany("updates to execute, in order" updates: [simulationsUpdates!]!): [simulationsMutationResponse]
  """
  update data of the table: "simpipe.steps"
  """
  updateSteps("increments the numeric columns with given value of the filtered values" _inc: stepsIncInput, "sets the columns of the filtered rows to the given values" _set: stepsSetInput, "filter the rows which have to be updated" where: stepsBoolExp!): stepsMutationResponse
  """
  update single row of the table: "simpipe.steps"
  """
  updateStepsByPk("increments the numeric columns with given value of the filtered values" _inc: stepsIncInput, "sets the columns of the filtered rows to the given values" _set: stepsSetInput, pk_columns: stepsPkColumnsInput!): steps
  """
  update multiples rows of table: "simpipe.steps"
  """
  updateStepsMany("updates to execute, in order" updates: [stepsUpdates!]!): [stepsMutationResponse]
}
scalar numeric
type query_root {
  ComputeUploadPresignedUrl: String
  Ping: String
  Username: String
  """
  fetch data from the table: "simpipe.runs" using primary key columns
  """
  run(runId: uuid!): runs
  "An array relationship"
  runs("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): [runs!]!
  "An aggregate relationship"
  runsAggregate("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): runsAggregate!
  """
  fetch data from the table: "simpipe.cpu"
  """
  simpipeCpu("distinct select on columns" distinctOn: [SimpipeCpuSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeCpuOrderBy!], "filter the rows returned" where: SimpipeCpuBoolExp): [SimpipeCpu!]!
  """
  fetch aggregated fields from the table: "simpipe.cpu"
  """
  simpipeCpuAggregate("distinct select on columns" distinctOn: [SimpipeCpuSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeCpuOrderBy!], "filter the rows returned" where: SimpipeCpuBoolExp): SimpipeCpuAggregate!
  """
  fetch data from the table: "simpipe.envs"
  """
  simpipeEnvs("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): [SimpipeEnvs!]!
  """
  fetch aggregated fields from the table: "simpipe.envs"
  """
  simpipeEnvsAggregate("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): SimpipeEnvsAggregate!
  """
  fetch data from the table: "simpipe.envs" using primary key columns
  """
  simpipeEnvsByPk(envId: Int!): SimpipeEnvs
  """
  fetch data from the table: "simpipe.logs"
  """
  simpipeLogs("distinct select on columns" distinctOn: [SimpipeLogsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeLogsOrderBy!], "filter the rows returned" where: SimpipeLogsBoolExp): [SimpipeLogs!]!
  """
  fetch aggregated fields from the table: "simpipe.logs"
  """
  simpipeLogsAggregate("distinct select on columns" distinctOn: [SimpipeLogsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeLogsOrderBy!], "filter the rows returned" where: SimpipeLogsBoolExp): SimpipeLogsAggregate!
  """
  fetch data from the table: "simpipe.logs" using primary key columns
  """
  simpipeLogsByPk(stepId: uuid!): SimpipeLogs
  """
  fetch data from the table: "simpipe.resource_usage"
  """
  simpipeResourceUsage("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): [SimpipeResourceUsage!]!
  """
  fetch aggregated fields from the table: "simpipe.resource_usage"
  """
  simpipeResourceUsageAggregate("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): SimpipeResourceUsageAggregate!
  """
  fetch data from the table: "simpipe.resource_usage" using primary key columns
  """
  simpipeResourceUsageByPk(id: bigint!): SimpipeResourceUsage
  """
  fetch data from the table: "simpipe.run_status"
  """
  simpipeRunStatus("distinct select on columns" distinctOn: [SimpipeRunStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeRunStatusOrderBy!], "filter the rows returned" where: SimpipeRunStatusBoolExp): [SimpipeRunStatus!]!
  """
  fetch aggregated fields from the table: "simpipe.run_status"
  """
  simpipeRunStatusAggregate("distinct select on columns" distinctOn: [SimpipeRunStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeRunStatusOrderBy!], "filter the rows returned" where: SimpipeRunStatusBoolExp): SimpipeRunStatusAggregate!
  """
  fetch data from the table: "simpipe.run_status" using primary key columns
  """
  simpipeRunStatusByPk(value: String!): SimpipeRunStatus
  """
  fetch data from the table: "simpipe.step_status"
  """
  simpipeStepStatus("distinct select on columns" distinctOn: [SimpipeStepStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeStepStatusOrderBy!], "filter the rows returned" where: SimpipeStepStatusBoolExp): [SimpipeStepStatus!]!
  """
  fetch aggregated fields from the table: "simpipe.step_status"
  """
  simpipeStepStatusAggregate("distinct select on columns" distinctOn: [SimpipeStepStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeStepStatusOrderBy!], "filter the rows returned" where: SimpipeStepStatusBoolExp): SimpipeStepStatusAggregate!
  """
  fetch data from the table: "simpipe.step_status" using primary key columns
  """
  simpipeStepStatusByPk(value: String!): SimpipeStepStatus
  """
  fetch data from the table: "simpipe.simulations" using primary key columns
  """
  simulation("uuid of the simulation" simulationId: uuid!): simulations
  """
  fetch data from the table: "simpipe.simulations"
  """
  simulations("distinct select on columns" distinctOn: [simulationsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [simulationsOrderBy!], "filter the rows returned" where: simulationsBoolExp): [simulations!]!
  """
  fetch aggregated fields from the table: "simpipe.simulations"
  """
  simulationsAggregate("distinct select on columns" distinctOn: [simulationsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [simulationsOrderBy!], "filter the rows returned" where: simulationsBoolExp): simulationsAggregate!
  "An array relationship"
  steps("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): [steps!]!
  "An aggregate relationship"
  stepsAggregate("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): stepsAggregate!
  """
  fetch data from the table: "simpipe.steps" using primary key columns
  """
  stepsByPk(stepId: uuid!): steps
}
"Simulation run"
type runs {
  created: timestamptz!
  ended: timestamptz
  name: String
  runId: uuid!
  "An object relationship"
  simulation: simulations!
  simulationId: uuid!
  started: timestamptz
  status: SimpipeRunStatusEnum!
  "An array relationship"
  steps("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): [steps!]!
  "An aggregate relationship"
  stepsAggregate("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): stepsAggregate!
}
"""
aggregated selection of "simpipe.runs"
"""
type runsAggregate {
  aggregate: runsAggregateFields
  nodes: [runs!]!
}
"""
aggregate fields of "simpipe.runs"
"""
type runsAggregateFields {
  count(columns: [runsSelectColumn!], distinct: Boolean): Int!
  max: runsMaxFields
  min: runsMinFields
}
"""
order by aggregate values of table "simpipe.runs"
"""
input runsAggregateOrderBy {
  count: OrderBy
  max: runs_max_order_by
  min: runs_min_order_by
}
"""
input type for inserting array relation for remote table "simpipe.runs"
"""
input runsArrRelInsertInput {
  data: [runsInsertInput!]!
  "upsert condition"
  onConflict: runsOnConflict
}
"""
Boolean expression to filter rows from the table "simpipe.runs". All fields are combined with a logical 'AND'.
"""
input runsBoolExp {
  _and: [runsBoolExp!]
  _not: runsBoolExp
  _or: [runsBoolExp!]
  created: TimestamptzComparisonExp
  ended: TimestamptzComparisonExp
  name: StringComparisonExp
  runId: UuidComparisonExp
  simulation: simulationsBoolExp
  simulationId: UuidComparisonExp
  started: TimestamptzComparisonExp
  status: SimpipeRunStatusEnumComparisonExp
  steps: stepsBoolExp
  steps_aggregate: steps_aggregate_bool_exp
}
"""
unique or primary key constraints on table "simpipe.runs"
"""
enum runsConstraint {
  """
  unique or primary key constraint on columns "run_id"
  """
  runs_pkey
}
"""
input type for inserting data into table "simpipe.runs"
"""
input runsInsertInput {
  created: timestamptz
  ended: timestamptz
  name: String
  runId: uuid
  simulation: simulationsObjRelInsertInput
  simulationId: uuid
  started: timestamptz
  status: SimpipeRunStatusEnum
  steps: stepsArrRelInsertInput
}
"aggregate max on columns"
type runsMaxFields {
  created: timestamptz
  ended: timestamptz
  name: String
  runId: uuid
  simulationId: uuid
  started: timestamptz
}
"aggregate min on columns"
type runsMinFields {
  created: timestamptz
  ended: timestamptz
  name: String
  runId: uuid
  simulationId: uuid
  started: timestamptz
}
"""
response of any mutation on the table "simpipe.runs"
"""
type runsMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [runs!]!
}
"""
input type for inserting object relation for remote table "simpipe.runs"
"""
input runsObjRelInsertInput {
  data: runsInsertInput!
  "upsert condition"
  onConflict: runsOnConflict
}
"""
on_conflict condition type for table "simpipe.runs"
"""
input runsOnConflict {
  constraint: runsConstraint!
  update_columns: [runsUpdateColumn!]! = []
  where: runsBoolExp
}
"""
Ordering options when selecting data from "simpipe.runs".
"""
input runsOrderBy {
  created: OrderBy
  ended: OrderBy
  name: OrderBy
  runId: OrderBy
  simulation: simulationsOrderBy
  simulationId: OrderBy
  started: OrderBy
  status: OrderBy
  stepsAggregate: stepsAggregateOrderBy
}
"primary key columns input for table: simpipe.runs"
input runsPkColumnsInput {
  runId: uuid!
}
"""
select columns of table "simpipe.runs"
"""
enum runsSelectColumn {
  "column name"
  created
  "column name"
  ended
  "column name"
  name
  "column name"
  runId
  "column name"
  simulationId
  "column name"
  started
  "column name"
  status
}
"""
input type for updating data in table "simpipe.runs"
"""
input runsSetInput {
  created: timestamptz
  ended: timestamptz
  name: String
  runId: uuid
  simulationId: uuid
  started: timestamptz
  status: SimpipeRunStatusEnum
}
"""
Streaming cursor of the table "runs"
"""
input runsStreamCursorInput {
  "Stream column input with initial value"
  initialValue: runsStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input runsStreamCursorValueInput {
  created: timestamptz
  ended: timestamptz
  name: String
  runId: uuid
  simulationId: uuid
  started: timestamptz
  status: SimpipeRunStatusEnum
}
"""
update columns of table "simpipe.runs"
"""
enum runsUpdateColumn {
  "column name"
  created
  "column name"
  ended
  "column name"
  name
  "column name"
  runId
  "column name"
  simulationId
  "column name"
  started
  "column name"
  status
}
input runsUpdates {
  "sets the columns of the filtered rows to the given values"
  _set: runsSetInput
  "filter the rows which have to be updated"
  where: runsBoolExp!
}
input runs_aggregate_bool_exp {
  count: runs_aggregate_bool_exp_count
}
input runs_aggregate_bool_exp_count {
  arguments: [runsSelectColumn!]
  distinct: Boolean
  filter: runsBoolExp
  predicate: IntComparisonExp!
}
"""
order by max() on columns of table "simpipe.runs"
"""
input runs_max_order_by {
  created: OrderBy
  ended: OrderBy
  name: OrderBy
  runId: OrderBy
  simulationId: OrderBy
  started: OrderBy
}
"""
order by min() on columns of table "simpipe.runs"
"""
input runs_min_order_by {
  created: OrderBy
  ended: OrderBy
  name: OrderBy
  runId: OrderBy
  simulationId: OrderBy
  started: OrderBy
}
input simpipe_envs_aggregate_bool_exp {
  count: simpipe_envs_aggregate_bool_exp_count
}
input simpipe_envs_aggregate_bool_exp_count {
  arguments: [SimpipeEnvsSelectColumn!]
  distinct: Boolean
  filter: SimpipeEnvsBoolExp
  predicate: IntComparisonExp!
}
"""
order by avg() on columns of table "simpipe.envs"
"""
input simpipe_envs_avg_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by max() on columns of table "simpipe.envs"
"""
input simpipe_envs_max_order_by {
  envId: OrderBy
  name: OrderBy
  stepId: OrderBy
  value: OrderBy
}
"""
order by min() on columns of table "simpipe.envs"
"""
input simpipe_envs_min_order_by {
  envId: OrderBy
  name: OrderBy
  stepId: OrderBy
  value: OrderBy
}
"""
order by stddev() on columns of table "simpipe.envs"
"""
input simpipe_envs_stddev_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by stddev_pop() on columns of table "simpipe.envs"
"""
input simpipe_envs_stddev_pop_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by stddev_samp() on columns of table "simpipe.envs"
"""
input simpipe_envs_stddev_samp_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by sum() on columns of table "simpipe.envs"
"""
input simpipe_envs_sum_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by var_pop() on columns of table "simpipe.envs"
"""
input simpipe_envs_var_pop_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by var_samp() on columns of table "simpipe.envs"
"""
input simpipe_envs_var_samp_order_by {
  envId: OrderBy
  stepId: OrderBy
}
"""
order by variance() on columns of table "simpipe.envs"
"""
input simpipe_envs_variance_order_by {
  envId: OrderBy
  stepId: OrderBy
}
input simpipe_resource_usage_aggregate_bool_exp {
  count: simpipe_resource_usage_aggregate_bool_exp_count
}
input simpipe_resource_usage_aggregate_bool_exp_count {
  arguments: [SimpipeResourceUsageSelectColumn!]
  distinct: Boolean
  filter: SimpipeResourceUsageBoolExp
  predicate: IntComparisonExp!
}
"""
order by avg() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_avg_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by max() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_max_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  time: OrderBy
  txValue: OrderBy
}
"""
order by min() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_min_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  time: OrderBy
  txValue: OrderBy
}
"""
order by stddev() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_stddev_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by stddev_pop() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_stddev_pop_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by stddev_samp() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_stddev_samp_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by sum() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_sum_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by var_pop() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_var_pop_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by var_samp() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_var_samp_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"""
order by variance() on columns of table "simpipe.resource_usage"
"""
input simpipe_resource_usage_variance_order_by {
  cpu: OrderBy
  id: OrderBy
  memory: OrderBy
  memoryMax: OrderBy
  rxValue: OrderBy
  stepId: OrderBy
  txValue: OrderBy
}
"Simulations"
type simulations {
  "DateTime of when the simulation was created"
  created: timestamptz!
  name: String
  pipelineDescription("JSON select path" path: String): jsonb
  "An array relationship"
  runs("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): [runs!]!
  "An aggregate relationship"
  runsAggregate("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): runsAggregate!
  "uuid of the simulation"
  simulationId: uuid!
  userId: String
}
"""
aggregated selection of "simpipe.simulations"
"""
type simulationsAggregate {
  aggregate: simulationsAggregateFields
  nodes: [simulations!]!
}
"""
aggregate fields of "simpipe.simulations"
"""
type simulationsAggregateFields {
  count(columns: [simulationsSelectColumn!], distinct: Boolean): Int!
  max: simulationsMaxFields
  min: simulationsMinFields
}
"append existing jsonb value of filtered columns with new jsonb value"
input simulationsAppendInput {
  pipelineDescription: jsonb
}
"""
Boolean expression to filter rows from the table "simpipe.simulations". All fields are combined with a logical 'AND'.
"""
input simulationsBoolExp {
  _and: [simulationsBoolExp!]
  _not: simulationsBoolExp
  _or: [simulationsBoolExp!]
  created: TimestamptzComparisonExp
  name: StringComparisonExp
  pipelineDescription: JsonbComparisonExp
  runs: runsBoolExp
  runs_aggregate: runs_aggregate_bool_exp
  simulationId: UuidComparisonExp
  userId: StringComparisonExp
}
"""
unique or primary key constraints on table "simpipe.simulations"
"""
enum simulationsConstraint {
  """
  unique or primary key constraint on columns "simulation_id"
  """
  simulations_pkey
}
"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input simulationsDeleteAtPathInput {
  pipelineDescription: [String!]
}
"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input simulationsDeleteElemInput {
  pipelineDescription: Int
}
"delete key/value pair or string element. key/value pairs are matched based on their key value"
input simulationsDeleteKeyInput {
  pipelineDescription: String
}
"""
input type for inserting data into table "simpipe.simulations"
"""
input simulationsInsertInput {
  "DateTime of when the simulation was created"
  created: timestamptz
  name: String
  pipelineDescription: jsonb
  runs: runsArrRelInsertInput
  "uuid of the simulation"
  simulationId: uuid
  userId: String
}
"aggregate max on columns"
type simulationsMaxFields {
  "DateTime of when the simulation was created"
  created: timestamptz
  name: String
  "uuid of the simulation"
  simulationId: uuid
  userId: String
}
"aggregate min on columns"
type simulationsMinFields {
  "DateTime of when the simulation was created"
  created: timestamptz
  name: String
  "uuid of the simulation"
  simulationId: uuid
  userId: String
}
"""
response of any mutation on the table "simpipe.simulations"
"""
type simulationsMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [simulations!]!
}
"""
input type for inserting object relation for remote table "simpipe.simulations"
"""
input simulationsObjRelInsertInput {
  data: simulationsInsertInput!
  "upsert condition"
  onConflict: simulationsOnConflict
}
"""
on_conflict condition type for table "simpipe.simulations"
"""
input simulationsOnConflict {
  constraint: simulationsConstraint!
  update_columns: [simulationsUpdateColumn!]! = []
  where: simulationsBoolExp
}
"""
Ordering options when selecting data from "simpipe.simulations".
"""
input simulationsOrderBy {
  created: OrderBy
  name: OrderBy
  pipelineDescription: OrderBy
  runsAggregate: runsAggregateOrderBy
  simulationId: OrderBy
  userId: OrderBy
}
"primary key columns input for table: simpipe.simulations"
input simulationsPkColumnsInput {
  "uuid of the simulation"
  simulationId: uuid!
}
"prepend existing jsonb value of filtered columns with new jsonb value"
input simulationsPrependInput {
  pipelineDescription: jsonb
}
"""
select columns of table "simpipe.simulations"
"""
enum simulationsSelectColumn {
  "column name"
  created
  "column name"
  name
  "column name"
  pipelineDescription
  "column name"
  simulationId
  "column name"
  userId
}
"""
input type for updating data in table "simpipe.simulations"
"""
input simulationsSetInput {
  "DateTime of when the simulation was created"
  created: timestamptz
  name: String
  pipelineDescription: jsonb
  "uuid of the simulation"
  simulationId: uuid
  userId: String
}
"""
Streaming cursor of the table "simulations"
"""
input simulationsStreamCursorInput {
  "Stream column input with initial value"
  initialValue: simulationsStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input simulationsStreamCursorValueInput {
  "DateTime of when the simulation was created"
  created: timestamptz
  name: String
  pipelineDescription: jsonb
  "uuid of the simulation"
  simulationId: uuid
  userId: String
}
"""
update columns of table "simpipe.simulations"
"""
enum simulationsUpdateColumn {
  "column name"
  created
  "column name"
  name
  "column name"
  pipelineDescription
  "column name"
  simulationId
  "column name"
  userId
}
input simulationsUpdates {
  "append existing jsonb value of filtered columns with new jsonb value"
  _append: simulationsAppendInput
  "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
  _deleteAtPath: simulationsDeleteAtPathInput
  "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
  _deleteElem: simulationsDeleteElemInput
  "delete key/value pair or string element. key/value pairs are matched based on their key value"
  _deleteKey: simulationsDeleteKeyInput
  "prepend existing jsonb value of filtered columns with new jsonb value"
  _prepend: simulationsPrependInput
  "sets the columns of the filtered rows to the given values"
  _set: simulationsSetInput
  "filter the rows which have to be updated"
  where: simulationsBoolExp!
}
"""
columns and relationships of "simpipe.steps"
"""
type steps {
  created: timestamptz!
  ended: timestamptz
  "An array relationship"
  envs("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): [SimpipeEnvs!]!
  "An aggregate relationship"
  envsAggregate("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): SimpipeEnvsAggregate!
  image: String!
  "An object relationship"
  log: SimpipeLogs
  name: String!
  pipelineStepNumber: Int!
  "An aggregate relationship"
  resourceUsagesAggregate("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): SimpipeResourceUsageAggregate!
  "An array relationship"
  resource_usages("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): [SimpipeResourceUsage!]!
  "An object relationship"
  run: runs!
  runId: uuid!
  started: timestamptz
  status: SimpipeStepStatusEnum!
  stepId: uuid!
  timeout: Int!
}
"""
aggregated selection of "simpipe.steps"
"""
type stepsAggregate {
  aggregate: stepsAggregateFields
  nodes: [steps!]!
}
"""
aggregate fields of "simpipe.steps"
"""
type stepsAggregateFields {
  avg: stepsAvgFields
  count(columns: [stepsSelectColumn!], distinct: Boolean): Int!
  max: stepsMaxFields
  min: stepsMinFields
  stddev: stepsStddevFields
  stddevPop: stepsStddev_popFields
  stddevSamp: stepsStddev_sampFields
  sum: stepsSumFields
  varPop: stepsVar_popFields
  varSamp: stepsVar_sampFields
  variance: stepsVarianceFields
}
"""
order by aggregate values of table "simpipe.steps"
"""
input stepsAggregateOrderBy {
  avg: steps_avg_order_by
  count: OrderBy
  max: steps_max_order_by
  min: steps_min_order_by
  stddev: steps_stddev_order_by
  stddev_pop: steps_stddev_pop_order_by
  stddev_samp: steps_stddev_samp_order_by
  sum: steps_sum_order_by
  var_pop: steps_var_pop_order_by
  var_samp: steps_var_samp_order_by
  variance: steps_variance_order_by
}
"""
input type for inserting array relation for remote table "simpipe.steps"
"""
input stepsArrRelInsertInput {
  data: [stepsInsertInput!]!
  "upsert condition"
  onConflict: stepsOnConflict
}
"aggregate avg on columns"
type stepsAvgFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"""
Boolean expression to filter rows from the table "simpipe.steps". All fields are combined with a logical 'AND'.
"""
input stepsBoolExp {
  _and: [stepsBoolExp!]
  _not: stepsBoolExp
  _or: [stepsBoolExp!]
  created: TimestamptzComparisonExp
  ended: TimestamptzComparisonExp
  envs: SimpipeEnvsBoolExp
  envs_aggregate: simpipe_envs_aggregate_bool_exp
  image: StringComparisonExp
  log: SimpipeLogsBoolExp
  name: StringComparisonExp
  pipelineStepNumber: IntComparisonExp
  resource_usages: SimpipeResourceUsageBoolExp
  resource_usages_aggregate: simpipe_resource_usage_aggregate_bool_exp
  run: runsBoolExp
  runId: UuidComparisonExp
  started: TimestamptzComparisonExp
  status: SimpipeStepStatusEnumComparisonExp
  stepId: StringComparisonExp
  timeout: IntComparisonExp
}
"""
unique or primary key constraints on table "simpipe.steps"
"""
enum stepsConstraint {
  """
  unique or primary key constraint on columns "run_id", "pipeline_step_number"
  """
  steps_pipeline_step_number_run_id_key
  """
  unique or primary key constraint on columns "step_id"
  """
  steps_pkey
  """
  unique or primary key constraint on columns "run_id", "name"
  """
  steps_run_id_name_key
}
"""
input type for incrementing numeric columns in table "simpipe.steps"
"""
input stepsIncInput {
  pipelineStepNumber: Int
  stepId: uuid
  timeout: Int
}
"""
input type for inserting data into table "simpipe.steps"
"""
input stepsInsertInput {
  created: timestamptz
  ended: timestamptz
  envs: SimpipeEnvsArrRelInsertInput
  image: String
  log: SimpipeLogsObjRelInsertInput
  name: String
  pipelineStepNumber: Int
  resource_usages: SimpipeResourceUsageArrRelInsertInput
  run: runsObjRelInsertInput
  runId: uuid
  started: timestamptz
  status: SimpipeStepStatusEnum
  stepId: uuid
  timeout: Int
}
"aggregate max on columns"
type stepsMaxFields {
  created: timestamptz
  ended: timestamptz
  image: String
  name: String
  pipelineStepNumber: Int
  runId: uuid
  started: timestamptz
  stepId: uuid
  timeout: Int
}
"aggregate min on columns"
type stepsMinFields {
  created: timestamptz
  ended: timestamptz
  image: String
  name: String
  pipelineStepNumber: Int
  runId: uuid
  started: timestamptz
  stepId: uuid
  timeout: Int
}
"""
response of any mutation on the table "simpipe.steps"
"""
type stepsMutationResponse {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [steps!]!
}
"""
input type for inserting object relation for remote table "simpipe.steps"
"""
input stepsObjRelInsertInput {
  data: stepsInsertInput!
  "upsert condition"
  onConflict: stepsOnConflict
}
"""
on_conflict condition type for table "simpipe.steps"
"""
input stepsOnConflict {
  constraint: stepsConstraint!
  update_columns: [stepsUpdateColumn!]! = []
  where: stepsBoolExp
}
"""
Ordering options when selecting data from "simpipe.steps".
"""
input stepsOrderBy {
  created: OrderBy
  ended: OrderBy
  envsAggregate: SimpipeEnvsAggregateOrderBy
  image: OrderBy
  log: SimpipeLogsOrderBy
  name: OrderBy
  pipelineStepNumber: OrderBy
  resource_usagesAggregate: SimpipeResourceUsageAggregateOrderBy
  run: runsOrderBy
  runId: OrderBy
  started: OrderBy
  status: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"primary key columns input for table: simpipe.steps"
input stepsPkColumnsInput {
  stepId: uuid!
}
"""
select columns of table "simpipe.steps"
"""
enum stepsSelectColumn {
  "column name"
  created
  "column name"
  ended
  "column name"
  image
  "column name"
  name
  "column name"
  pipelineStepNumber
  "column name"
  runId
  "column name"
  started
  "column name"
  status
  "column name"
  stepId
  "column name"
  timeout
}
"""
input type for updating data in table "simpipe.steps"
"""
input stepsSetInput {
  created: timestamptz
  ended: timestamptz
  image: String
  name: String
  pipelineStepNumber: Int
  runId: uuid
  started: timestamptz
  status: SimpipeStepStatusEnum
  stepId: uuid
  timeout: Int
}
"aggregate stddev on columns"
type stepsStddevFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"aggregate stddev_pop on columns"
type stepsStddev_popFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"aggregate stddev_samp on columns"
type stepsStddev_sampFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"""
Streaming cursor of the table "steps"
"""
input stepsStreamCursorInput {
  "Stream column input with initial value"
  initialValue: stepsStreamCursorValueInput!
  "cursor ordering"
  ordering: CursorOrdering
}
"Initial value of the column from where the streaming should start"
input stepsStreamCursorValueInput {
  created: timestamptz
  ended: timestamptz
  image: String
  name: String
  pipelineStepNumber: Int
  runId: uuid
  started: timestamptz
  status: SimpipeStepStatusEnum
  stepId: uuid
  timeout: Int
}
"aggregate sum on columns"
type stepsSumFields {
  pipelineStepNumber: Int
  stepId: uuid
  timeout: Int
}
"""
update columns of table "simpipe.steps"
"""
enum stepsUpdateColumn {
  "column name"
  created
  "column name"
  ended
  "column name"
  image
  "column name"
  name
  "column name"
  pipelineStepNumber
  "column name"
  runId
  "column name"
  started
  "column name"
  status
  "column name"
  stepId
  "column name"
  timeout
}
input stepsUpdates {
  "increments the numeric columns with given value of the filtered values"
  _inc: stepsIncInput
  "sets the columns of the filtered rows to the given values"
  _set: stepsSetInput
  "filter the rows which have to be updated"
  where: stepsBoolExp!
}
"aggregate var_pop on columns"
type stepsVar_popFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"aggregate var_samp on columns"
type stepsVar_sampFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
"aggregate variance on columns"
type stepsVarianceFields {
  pipelineStepNumber: Float
  stepId: Float
  timeout: Float
}
input steps_aggregate_bool_exp {
  count: steps_aggregate_bool_exp_count
}
input steps_aggregate_bool_exp_count {
  arguments: [stepsSelectColumn!]
  distinct: Boolean
  filter: stepsBoolExp
  predicate: IntComparisonExp!
}
"""
order by avg() on columns of table "simpipe.steps"
"""
input steps_avg_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by max() on columns of table "simpipe.steps"
"""
input steps_max_order_by {
  created: OrderBy
  ended: OrderBy
  image: OrderBy
  name: OrderBy
  pipelineStepNumber: OrderBy
  runId: OrderBy
  started: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by min() on columns of table "simpipe.steps"
"""
input steps_min_order_by {
  created: OrderBy
  ended: OrderBy
  image: OrderBy
  name: OrderBy
  pipelineStepNumber: OrderBy
  runId: OrderBy
  started: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by stddev() on columns of table "simpipe.steps"
"""
input steps_stddev_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by stddev_pop() on columns of table "simpipe.steps"
"""
input steps_stddev_pop_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by stddev_samp() on columns of table "simpipe.steps"
"""
input steps_stddev_samp_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by sum() on columns of table "simpipe.steps"
"""
input steps_sum_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by var_pop() on columns of table "simpipe.steps"
"""
input steps_var_pop_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by var_samp() on columns of table "simpipe.steps"
"""
input steps_var_samp_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
"""
order by variance() on columns of table "simpipe.steps"
"""
input steps_variance_order_by {
  pipelineStepNumber: OrderBy
  stepId: OrderBy
  timeout: OrderBy
}
type subscription_root {
  """
  fetch data from the table: "simpipe.runs" using primary key columns
  """
  run(runId: uuid!): runs
  "An array relationship"
  runs("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): [runs!]!
  "An aggregate relationship"
  runsAggregate("distinct select on columns" distinctOn: [runsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [runsOrderBy!], "filter the rows returned" where: runsBoolExp): runsAggregate!
  """
  fetch data from the table in a streaming manner: "simpipe.runs"
  """
  runsStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [runsStreamCursorInput]!, "filter the rows returned" where: runsBoolExp): [runs!]!
  """
  fetch data from the table: "simpipe.cpu"
  """
  simpipeCpu("distinct select on columns" distinctOn: [SimpipeCpuSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeCpuOrderBy!], "filter the rows returned" where: SimpipeCpuBoolExp): [SimpipeCpu!]!
  """
  fetch aggregated fields from the table: "simpipe.cpu"
  """
  simpipeCpuAggregate("distinct select on columns" distinctOn: [SimpipeCpuSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeCpuOrderBy!], "filter the rows returned" where: SimpipeCpuBoolExp): SimpipeCpuAggregate!
  """
  fetch data from the table in a streaming manner: "simpipe.cpu"
  """
  simpipeCpuStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeCpuStreamCursorInput]!, "filter the rows returned" where: SimpipeCpuBoolExp): [SimpipeCpu!]!
  """
  fetch data from the table: "simpipe.envs"
  """
  simpipeEnvs("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): [SimpipeEnvs!]!
  """
  fetch aggregated fields from the table: "simpipe.envs"
  """
  simpipeEnvsAggregate("distinct select on columns" distinctOn: [SimpipeEnvsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeEnvsOrderBy!], "filter the rows returned" where: SimpipeEnvsBoolExp): SimpipeEnvsAggregate!
  """
  fetch data from the table: "simpipe.envs" using primary key columns
  """
  simpipeEnvsByPk(envId: Int!): SimpipeEnvs
  """
  fetch data from the table in a streaming manner: "simpipe.envs"
  """
  simpipeEnvsStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeEnvsStreamCursorInput]!, "filter the rows returned" where: SimpipeEnvsBoolExp): [SimpipeEnvs!]!
  """
  fetch data from the table: "simpipe.logs"
  """
  simpipeLogs("distinct select on columns" distinctOn: [SimpipeLogsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeLogsOrderBy!], "filter the rows returned" where: SimpipeLogsBoolExp): [SimpipeLogs!]!
  """
  fetch aggregated fields from the table: "simpipe.logs"
  """
  simpipeLogsAggregate("distinct select on columns" distinctOn: [SimpipeLogsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeLogsOrderBy!], "filter the rows returned" where: SimpipeLogsBoolExp): SimpipeLogsAggregate!
  """
  fetch data from the table: "simpipe.logs" using primary key columns
  """
  simpipeLogsByPk(stepId: uuid!): SimpipeLogs
  """
  fetch data from the table in a streaming manner: "simpipe.logs"
  """
  simpipeLogsStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeLogsStreamCursorInput]!, "filter the rows returned" where: SimpipeLogsBoolExp): [SimpipeLogs!]!
  """
  fetch data from the table: "simpipe.resource_usage"
  """
  simpipeResourceUsage("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): [SimpipeResourceUsage!]!
  """
  fetch aggregated fields from the table: "simpipe.resource_usage"
  """
  simpipeResourceUsageAggregate("distinct select on columns" distinctOn: [SimpipeResourceUsageSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeResourceUsageOrderBy!], "filter the rows returned" where: SimpipeResourceUsageBoolExp): SimpipeResourceUsageAggregate!
  """
  fetch data from the table: "simpipe.resource_usage" using primary key columns
  """
  simpipeResourceUsageByPk(id: bigint!): SimpipeResourceUsage
  """
  fetch data from the table in a streaming manner: "simpipe.resource_usage"
  """
  simpipeResourceUsageStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeResourceUsageStreamCursorInput]!, "filter the rows returned" where: SimpipeResourceUsageBoolExp): [SimpipeResourceUsage!]!
  """
  fetch data from the table: "simpipe.run_status"
  """
  simpipeRunStatus("distinct select on columns" distinctOn: [SimpipeRunStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeRunStatusOrderBy!], "filter the rows returned" where: SimpipeRunStatusBoolExp): [SimpipeRunStatus!]!
  """
  fetch aggregated fields from the table: "simpipe.run_status"
  """
  simpipeRunStatusAggregate("distinct select on columns" distinctOn: [SimpipeRunStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeRunStatusOrderBy!], "filter the rows returned" where: SimpipeRunStatusBoolExp): SimpipeRunStatusAggregate!
  """
  fetch data from the table: "simpipe.run_status" using primary key columns
  """
  simpipeRunStatusByPk(value: String!): SimpipeRunStatus
  """
  fetch data from the table in a streaming manner: "simpipe.run_status"
  """
  simpipeRunStatusStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeRunStatusStreamCursorInput]!, "filter the rows returned" where: SimpipeRunStatusBoolExp): [SimpipeRunStatus!]!
  """
  fetch data from the table: "simpipe.step_status"
  """
  simpipeStepStatus("distinct select on columns" distinctOn: [SimpipeStepStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeStepStatusOrderBy!], "filter the rows returned" where: SimpipeStepStatusBoolExp): [SimpipeStepStatus!]!
  """
  fetch aggregated fields from the table: "simpipe.step_status"
  """
  simpipeStepStatusAggregate("distinct select on columns" distinctOn: [SimpipeStepStatusSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [SimpipeStepStatusOrderBy!], "filter the rows returned" where: SimpipeStepStatusBoolExp): SimpipeStepStatusAggregate!
  """
  fetch data from the table: "simpipe.step_status" using primary key columns
  """
  simpipeStepStatusByPk(value: String!): SimpipeStepStatus
  """
  fetch data from the table in a streaming manner: "simpipe.step_status"
  """
  simpipeStepStatusStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [SimpipeStepStatusStreamCursorInput]!, "filter the rows returned" where: SimpipeStepStatusBoolExp): [SimpipeStepStatus!]!
  """
  fetch data from the table: "simpipe.simulations" using primary key columns
  """
  simulation("uuid of the simulation" simulationId: uuid!): simulations
  """
  fetch data from the table: "simpipe.simulations"
  """
  simulations("distinct select on columns" distinctOn: [simulationsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [simulationsOrderBy!], "filter the rows returned" where: simulationsBoolExp): [simulations!]!
  """
  fetch aggregated fields from the table: "simpipe.simulations"
  """
  simulationsAggregate("distinct select on columns" distinctOn: [simulationsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [simulationsOrderBy!], "filter the rows returned" where: simulationsBoolExp): simulationsAggregate!
  """
  fetch data from the table in a streaming manner: "simpipe.simulations"
  """
  simulationsStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [simulationsStreamCursorInput]!, "filter the rows returned" where: simulationsBoolExp): [simulations!]!
  "An array relationship"
  steps("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): [steps!]!
  "An aggregate relationship"
  stepsAggregate("distinct select on columns" distinctOn: [stepsSelectColumn!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" orderBy: [stepsOrderBy!], "filter the rows returned" where: stepsBoolExp): stepsAggregate!
  """
  fetch data from the table: "simpipe.steps" using primary key columns
  """
  stepsByPk(stepId: uuid!): steps
  """
  fetch data from the table in a streaming manner: "simpipe.steps"
  """
  stepsStream("maximum number of rows returned in a single batch" batchSize: Int!, "cursor to stream the results returned by the query" cursor: [stepsStreamCursorInput]!, "filter the rows returned" where: stepsBoolExp): [steps!]!
}
scalar timestamptz
scalar uuid
scalar float8