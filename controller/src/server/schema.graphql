""" ArgoWorkflow is the definition of an executable pipeline in Argo. This definition includes all the details about the specific workflow instance you want to run, including the sequence of steps, inputs, outputs, and other configuration parameters. This is required to create and start dry runs in SIM-PIPE. """
scalar ArgoWorkflow
""" Workflow Templates in Argo that are reusable and parameterized workflow definitions. They allow you to define a generic workflow structure that can be instantiated multiple times with different input parameters """
scalar ArgoWorkflowTemplate
""" A value that represents a specific point in time, includes information such as the date and time, and time zone offset """
scalar TimeStamp
"""
Prometheus represents number as strings in JSON, because
the numbers in JSON are not accurate enough and doesn't support very large numbers.
This is because they are represented as  IEE 754 floating point numbers,
which are not accurate and do not represents numbers above 2^53 accurately.
The overhead is minimal as the numbers are represented as strings in JSON anyway.
You will need to parse the string to a number in your application.
"""
scalar PrometheusStringNumber

type Query {
  """ Fetches the username of the current user. """
  username: String! @auth
  """ Returns pong if the server is up and running. """
  ping: String!
  """ List of all docker registry credentials """
  dockerRegistryCredentials: [DockerRegistryCredential!]! @auth

  """ List of all projects """
  projects: [Project!]! @auth

  """ Get a project by ID """
  project(
    """ ID of the project to be fetched """
    projectId: String!): Project! @auth

  """ Get a dry run by ID """
  dryRun(
    """ ID of the dry run to be fetched """
    dryRunId: String!): DryRun! @auth


  """ Get an Argo  workflow template by name """
  workflowTemplate(
    """ Name of the Argo workflow template to be fetched """
    name: String!): WorkflowTemplate @auth

  """ List of all the artifacts """
  artifacts(
    """ The name of the bucket """
    bucketName: String): [Artifact!]! @auth

  """ Artifact metadata """
  artifact(
    """ The name of the bucket """
    bucketName: String!,
    """ The key of the artifact """
    key: String!): ArtifactMetadata @auth

  """ List of all the buckets """
  buckets: [Bucket!]! @auth
  
}

""" Project is the high level concept for a specific pipeline in SIM-PIPE. It contains all the previous dry runs of the pipeline and its results. """

type Project {
  """ The name of the project """
  name: String!

  """ The identifier of the project """
  id: String!

  """ Date of creation """
  createdAt: String!

  """ The list of dry runs in the project """
  dryRuns: [DryRun!]

  """ The list of workflow templates in the project """
  workflowTemplates: [WorkflowTemplate!]
}


""" Dry runs are created under a project which represents an executable instance of the pipeline. """
type DryRun {
  """ The identifier of the dry run """
  id: String!

  """ Date of creation """
  createdAt: String!

  """ The raw Argo workflow document"""
  argoWorkflow: ArgoWorkflow!

  """ Status of the dry run """
  status: DryRunStatus!

  """ The project to which the dry run belongs """
  project: Project

  """ The nodes of the dry run """
  nodes: [DryRunNode!]

  """ A node of the dry run, by id """
  node(id: String!): DryRunNode
}


""" Contains information about the status of a dry run """
type DryRunStatus {
  """ Phase a simple, high-level summary of where the workflow is in its lifecycle.
  Will be "Unknown, "Pending", or "Running" before the workflow is completed,
  and "Succeeded", "Failed" or "Error" once the workflow has completed. """
  phase: DryRunPhase!

  """ The current status of the dry run """
  startedAt: String

  """ Time at which this workflow completed """
  finishedAt: String

  """ Progress to completion """
  progress: String

  """ Human readable message indicating details about why the workflow is in this condition """
  message: String

  """ Estimated duration in seconds """
  estimatedDuration: Int
}

""" The phase of a dry run """
enum DryRunPhase {
  """ Dry run is waiting to run """
  Pending
  """ Dry run is running """
  Running
  """ Dry run is running but suspended """
  Suspended
  """ Dry run finished successfully """
  Succeeded
  """ Dry run was skipped """
  Failed
  """ Dry run had an error other than a non 0 exit code """
  Error
  """ Dry run was omitted because its depends condition was not met """
  Unknown
}

""" The phase of a dry run node """
enum DryRunNodePhase {
  """ Node is waiting to run """
  Pending
  """ Node is running """
  Running
  """ Node finished successfully """
  Succeeded
  """ Node was skipped """
  Skipped
  """ Node or child node exicited with non-0 exit code """
  Failed
  """ Node had an error other than a non 0 exit code """
  Error
  """ Node was omitted because its depends condition was not met """
  Omitted
  """ Unknown phase. Shouldn't happen. """
  Unknown
}

""" The type of a dry run node """
enum DryRunNodeType {
  Pod
  Container
  Steps
  StepGroup
  DAG
  TaskGroup
  Retry
  Skipped
  Suspend
  HTTP
  Plugin
}

interface DryRunNode {
  """ ID of the node """
  id: String!

  """ The type of the node """
  type: DryRunNodeType!

  """ The name of the node """
  name: String!

  """ Display name of the node """
  displayName: String


  """ The template name of the node """
  templateName: String


  """ The phase of the node """
  phase: DryRunNodePhase!

  """ The time at which the node started """
  startedAt: String

  """ The time at which the node finished """
  finishedAt: String

  """ The duration of the node in seconds """
  duration: Int

  """ The progress of the node """
  progress: String

  """ The children of the node """
  children: [DryRunNode!]
}

type DryRunNodePod implements DryRunNode {
  id: String!
  type: DryRunNodeType!
  name: String!
  displayName: String
  templateName: String
  phase: DryRunNodePhase!
  startedAt: String
  finishedAt: String
  duration: Int
  progress: String
  children: [DryRunNode!]


  """ The exit code of the node, if exited """
  exitCode: String

  """ Resources durations. Estimation from Argo, usually pretty not accurate """
  resourcesDuration: DryRunNodeResourceDuration

  """ The name of the pod. """
  metrics: DryRunNodeMetrics!

  """ The name of the pod. """
  podName: String!

  """ The logs of the node. """
  log(maxLines: Int, grep: String, sinceSeconds: Int, sinceTime: Int): [String!]

  """ Input artifacts of the node. """
  inputArtifacts: [Artifact!]

  """ Output artifacts of the node. """
  outputArtifacts: [Artifact!]
}

type DryRunNodeMisc implements DryRunNode {
  id: String!
  type: DryRunNodeType!
  name: String!
  displayName: String
  templateName: String
  phase: DryRunNodePhase!
  startedAt: String
  finishedAt: String
  duration: Int
  progress: String
  children: [DryRunNode!]
}


type PrometheusSample {
  timestamp: TimeStamp!
  value: PrometheusStringNumber!
}

""" Prometheus metrics for the node. """
type DryRunNodeMetrics {
  cpuSystemSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  cpuUsageSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  cpuUserSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fileDescriptors(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsInodesFree(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsInodesTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsIoCurrent(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsIoTimeSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsIoTimeWeightedSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsLimitBytes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsReadSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsReadsMergedTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsReadsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsSectorReadsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsSectorWritesTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsUsageBytes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsWriteSecondsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsWritesMergedTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  fsWritesTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryCache(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryFailcnt(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryFailuresTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryMappedFile(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryMaxUsageBytes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryRss(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memorySwap(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryUsageBytes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  memoryWorkingSetBytes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkReceiveBytesTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkReceiveErrorsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkReceivePacketsDroppedTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkReceivePacketsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkTransmitBytesTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkTransmitErrorsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkTransmitPacketsDroppedTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  networkTransmitPacketsTotal(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  processes(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  sockets(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  threads(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  threadsMax(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
  ulimitsSoft(start: TimeStamp, end: TimeStamp, step: Int): [PrometheusSample!]
}


type Bucket {
  """ The bucket name """
  name: String!
}

""" Contains information about files produced during a dry run execution """
type Artifact {
  """ The artifact name """
  name: String!
  """ The artifact path """
  key: String
  """ URL to download the artifact using an HTTP GET."""
  url: String
  """ The artifact size """
  size: Int
  """ The name of the bucket that holds the artifact """
  bucketName: String
}

""" Artifact metadata """
type ArtifactMetadata {
  """ Unique identifier of the artifact """
  etag: String
  """ Last modified date """
  lastModified: String
  """ Artifact metadata """
  metaData: String
  """ The artifact size """
  size: Int
}

"""
  Resources durations. Estimation from Argo, usually pretty not accurate.
  See https://argoproj.github.io/argo-workflows/resource-duration/
"""
type DryRunNodeResourceDuration {
  cpu: String
  memory: String
  gpu: String
}

""" Contains details of a docker registry """
type DockerRegistryCredential {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The docker registry endpoint """
  server: String!
}

""" WorkflowTemplate in SIM-PIPE associates an ArgoWorkflowTemplate to a project"""
type WorkflowTemplate {
  """ The name of the workflow template """
  name: String!

  """ The project to which the workflow template belongs """
  project: Project

  """ The raw Argo workflow document """
  argoWorkflowTemplate: ArgoWorkflowTemplate!
}

input DockerRegistryCredentialInput {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The password to use when authenticating with the docker registry """
  password: String!
  """ The docker registry endpoint """
  server: String!
}

""" The input data to create a new project. """
input CreateProjectInput {
  """ The name of the project """
  name: String!

  """ The id name of the project (optional) """
  id: String
}

""" The input data to create a new dry run """
input CreateDryRunInput {
  """ The project to which this dry run belongs (optional).

      The user must own the simulation.
  """
  projectId: String

  """ The id of the dry run (optional), will be generated if not provided """
  dryRunId: String

  """ The raw Argo workflow document.

  It's project id and and name will be overwritten if provided.
  """
  argoWorkflow: ArgoWorkflow!
}

""" The input data to create a workflow template """
input CreateWorkflowTemplateInput {
  """ The name of the workflow template, will be generated if not provided """
  name: String

  """ The project to which this workflow template belongs """
  projectId: String

  """ The raw Argo workflow document """
  argoWorkflowTemplate: ArgoWorkflowTemplate!
}

""" The input data to update a workflow template """
input UpdateWorkflowTemplateInput {
  """ The name of the workflow template """
  name: String!

  """ The project to which this workflow template belongs """
  projectId: String

  """ The raw Argo workflow document """
  argoWorkflowTemplate: ArgoWorkflowTemplate!
}


type Mutation @auth {
  """ Create a new project """
  createProject(
    """ Details of the new project """
    project: CreateProjectInput!): Project!

  """ Rename an existing project """
  renameProject(
    """ ID of the project to be renamed """
    projectId: String!,
    """ The new name for the project """
    name: String!): Project!

  """ Delete an existing project. The mutation returns true if the deletion was successful. """
  deleteProject(
    """ ID of the project to be deleted """
    projectId: String!): Boolean!

  """ Create a new dry run.

  projectId and id are optional and will be generated.
  If provided in the createDryRun arguments, they will overwrite the
  values in the argoWorkflow document.
  """
  createDryRun(
    """ Input to create the new dry run """
    input: CreateDryRunInput!): DryRun!

  """ Suspend an active dry run. """
  suspendDryRun(
    """ ID of the dry run to be suspended """
    dryRunId:String!): DryRun!

  """ Resume a paused dry run. """
  resumeDryRun(
    """ ID of the dry run to be resumed """
    dryRunId:String!): DryRun!

  """ Retry a failed dry run. Restart an existing dry run."""
  retryDryRun(
    """ ID of the dry run to be restarted """
    dryRunId:String!): DryRun!

  """ Resubmit a dry run. Create a copy of the current dry run and starts its execution."""
  resubmitDryRun(
    """ ID of the dry run to be resubmitted """
    dryRunId:String!): DryRun!

  """ Stop an active dry run. """
  stopDryRun(
    """ ID of the dry run to be stopped """
    dryRunId:String!,
    """ Set to true to terminate the dry run """
    terminate: Boolean): DryRun!

  """ Delete an existing dry run. The mutation returns true if the deletion was successful. """
  deleteDryRun(
    """ ID of the dry run to be deleted """
    dryRunId:String!): Boolean!

  """ Assign a dry run to a project """
  assignDryRunToProject(
    """ ID of the dry run to be assigned """
    dryRunId: String!,
    """ ID of the target project """
    projectId: String!): DryRun!

  """ Create a new docker registry credential """
  createDockerRegistryCredential(
    """ Input for the new docker registry credential """
    credential: DockerRegistryCredentialInput!): DockerRegistryCredential!

  """ Delete an existing docker registry credential. The mutation returns true if the deletion was successful. """
  deleteDockerRegistryCredential(
    """ Name of the docker registry credential to be deleted """
    name: String!): Boolean!

  """ Update an existing docker registry credential """
  updateDockerRegistryCredential(
    """ The new value of the docker registry credential to be updated """
    credential: DockerRegistryCredentialInput!): DockerRegistryCredential!

  """ Compute a presigned URL for uploading a file using HTTP PUT. The mutation returns the URL to upload the file. """
  computeUploadPresignedUrl(
    """ The name/path of the file you wish to upload """
    key: String, 
    """ The name of the bucket to upload the file to """
    bucketName: String): String!

  """ Create a new Argo workflow template """
  createWorkflowTemplate(
    """ Input for the new Argo workflow template """
    input: CreateWorkflowTemplateInput!): WorkflowTemplate!

  """ Update an existing Argo workflow template """
  updateWorkflowTemplate(
    """ The new value of the Argo workflow template to be updated """
    update: UpdateWorkflowTemplateInput!): WorkflowTemplate!

  """ Delete an existing Argo workflow template. The mutation returns true if the deletion was successful. """
  deleteWorkflowTemplate(
    """ Name of the Argo workflow template to be deleted """
    name: String!): Boolean!

  """ Buckets """
  createBucket(
    """ Create new bucket by name, return the bucket upon successful creation"""
    name: String!): String!

  """ Delete an existing bucket. The mutation returns true if the deletion was successful. """
  deleteBucket(
    """ The name of the bucket to be deleted """
    name: String!): Boolean!

  deleteArtifacts(
    """ The name of the bucket to be deleted """
    bucketName: String!,
    keys: [String!]!): Boolean!

  """ Compute scaling law for a set of dry runs """
  computeScalingLaw(
    """ The list of dry run ids """
    dryRunIds: [String]!): String!

}
