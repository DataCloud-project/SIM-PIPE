scalar uuid
scalar json
scalar ArgoWorkflow

type Query {
  """ Fetch the current username. """
  username: String! @auth
  """ Compute a presigned URL for uploading a file using a HTTP PUT. """
  computeUploadPresignedUrl: String! @auth
  """ Returns pong if the server is up and running. """
  ping: String!
  """ List of docker registry credentials. """
  dockerRegistryCredentials: [DockerRegistryCredential!]! @auth

  """ List of projects """
  projects: [Project!]! @auth

  """ Get a project by id """
  project(id: String!): Project! @auth

  """ Get a dry run by id """
  dryRun(id: uuid!): DryRun! @auth
}

type Project {
  """ The name of the project """
  name: String!
  """ The identifier of the project """
  id: String!
  """ Date of creation """
  createdAt: String!
  """ The dry runs in the project """
  dryRuns: [DryRun!]
}


type DryRun {
  """ The identifier of the run """
  id: String!

  """ Date of creation """
  createdAt: String!

  """ The raw Argo workflow document"""
  argoWorkflow: ArgoWorkflow!

  """ Status of the run """
  status: DryRunStatus!

  """ The project to which the run belongs """
  project: Project
}

type DryRunStatus {
  """ Phase a simple, high-level summary of where the workflow is in its lifecycle.
  Will be "Unknown, "Pending", or "Running" before the workflow is completed,
  and "Succeeded", "Failed" or "Error" once the workflow has completed. """
  phase: DryRunPhase!

  """ The current status of the run """
  startedAt: String

  """ Time at which this workflow completed """
  finishedAt: String

  """ Progress to completion """
  progress: String

  """ Human readable message indicating details about why the workflow is in this condition """
  message: String

  """ Estimated duration in seconds """
  estimatedDuration: Int
}

enum DryRunPhase {
  Unknown
  Pending
  Running
  Succeeded
  Failed
  Error
}

type DockerRegistryCredential {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The docker registry endpoint """
  server: String!
}

input DockerRegistryCredentialInput {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The password to use when authenticating with the docker registry """
  password: String!
  """ The docker registry endpoint """
  server: String!
}


input StepEnvironmentVariable {
  """ The name of the step to set the environment variable for """
  stepName: String!
  """ The name of the environment variable """
  name: String!
  """ The value of the environment variable """
  value: String!
}

input StepTimeout {
  """ The name of the step to set the timeout for """
  stepName: String!
  """ The timeout in seconds, must be greater than 0 and less than 86400 (24 hours) """
  timeout: Int!
}

input CreateProjectInput {
  """ The name of the project """
  name: String!

  """ The id name of the project (optional) """
  id: String
}

""" The input data to create a run """
input CreateDryRunInput {
  """ The simulation to which this run belongs.

      The user must own the simulation.
  """
  simulationId: uuid!

  """ The name of the run """
  name: String!

  """ An optional list of environment variables to set for the steps of the run container """
  environmentVariables: [StepEnvironmentVariable!]

  """ An optional list of timeouts to set for the steps of the run container """
  timeouts: [StepTimeout!]
}

input CreateSimulationInput {
  """ The name of the simulation """
  name: String!
  """ The description of the simulation pipeline.

  It is a JSON document but it must be sent as a string,
  because not all GraphQL clients support sending JSON documents
  in input variables.
  """
  pipelineDescription: json!
}

type Mutation @auth {
  """ Create a project """
  createProject(project: CreateProjectInput!): Project!

  """ Rename a project """
  renameProject(id: String!, name: String!): Project!

  """ Delete a project """
  deleteProject(id: String!): Boolean!

  """ Create a run, but does not start it """
  createDryRun(run: CreateDryRunInput!): DryRun!

  """ Start a run, if other runs are running this run will wait in the queue """
  startDryRun(runId:uuid!): DryRun

  """ Cancel a run, if the run is running it will be stopped """
  cancelDryRun(runId:uuid!): DryRun

  """ Create a docker registry credential """
  createDockerRegistryCredential(credential: DockerRegistryCredentialInput!): DockerRegistryCredential!

  """ Delete a docker registry credential """
  deleteDockerRegistryCredential(name: String!): Boolean!

  """ Update a docker registry credential """
  updateDockerRegistryCredential(credential: DockerRegistryCredentialInput!): DockerRegistryCredential!
}
