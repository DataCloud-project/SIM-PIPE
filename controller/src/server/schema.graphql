scalar ArgoWorkflow

type Query {
  """ Fetch the current username. """
  username: String! @auth
  """ Compute a presigned URL for uploading a file using a HTTP PUT. """
  computeUploadPresignedUrl: String! @auth
  """ Returns pong if the server is up and running. """
  ping: String!
  """ List of docker registry credentials. """
  dockerRegistryCredentials: [DockerRegistryCredential!]! @auth

  """ List of projects """
  projects: [Project!]! @auth

  """ Get a project by id """
  project(projectId: String!): Project! @auth

  """ Get a dry run by id """
  dryRun(dryRunId: String!): DryRun! @auth
}

type Project {
  """ The name of the project """
  name: String!

  """ The identifier of the project """
  id: String!

  """ Date of creation """
  createdAt: String!

  """ The dry runs in the project """
  dryRuns: [DryRun!]
}


type DryRun {
  """ The identifier of the run """
  id: String!

  """ Date of creation """
  createdAt: String!

  """ The raw Argo workflow document"""
  argoWorkflow: ArgoWorkflow!

  """ Status of the run """
  status: DryRunStatus!

  """ The project to which the run belongs """
  project: Project
}

type DryRunStatus {
  """ Phase a simple, high-level summary of where the workflow is in its lifecycle.
  Will be "Unknown, "Pending", or "Running" before the workflow is completed,
  and "Succeeded", "Failed" or "Error" once the workflow has completed. """
  phase: DryRunPhase!

  """ The current status of the run """
  startedAt: String

  """ Time at which this workflow completed """
  finishedAt: String

  """ Progress to completion """
  progress: String

  """ Human readable message indicating details about why the workflow is in this condition """
  message: String

  """ Estimated duration in seconds """
  estimatedDuration: Int
}

enum DryRunPhase {
  Unknown
  Pending
  Running
  Succeeded
  Failed
  Error
}

type DockerRegistryCredential {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The docker registry endpoint """
  server: String!
}

input DockerRegistryCredentialInput {
  """ The name of the docker registry """
  name: String!
  """ The username to use when authenticating with the docker registry """
  username: String!
  """ The password to use when authenticating with the docker registry """
  password: String!
  """ The docker registry endpoint """
  server: String!
}


input CreateProjectInput {
  """ The name of the project """
  name: String!

  """ The id name of the project (optional) """
  id: String
}

""" The input data to create a run """
input CreateDryRunInput {
  """ The project to which this run belongs (optional).

      The user must own the simulation.
  """
  projectId: String

  """ The id of the run (optional), will be generated if not provided """
  dryRunId: String

  """ The raw Argo workflow document.

  It's project id and and name will be overwritten if provided.
  """
  argoWorkflow: ArgoWorkflow!
}

type Mutation @auth {
  """ Create a project """
  createProject(project: CreateProjectInput!): Project!

  """ Rename a project """
  renameProject(projectId: String!, name: String!): Project!

  """ Delete a project """
  deleteProject(projectId: String!): Boolean!

  """ Create a run.

  projectId and id are optional and will be generated.
  If provided in the createDryRun arguments, they will overwrite the
  values in the argoWorkflow document.
  """
  createDryRun(argoWorkflow: ArgoWorkflow!, projectId: String, dryRunId: String): DryRun!

  """ Suspend a run. """
  suspendDryRun(dryRunId:String!): DryRun!

  """ Resume a run. """
  resumeDryRun(dryRunId:String!): DryRun!

  """ Retry a run. """
  retryDryRun(dryRunId:String!): DryRun!

  """ Resubmit a run. """
  resubmitDryRun(dryRunId:String!): DryRun!

  """ Stop a run. """
  stopDryRun(dryRunId:String!, terminate: Boolean): DryRun!

  """ Delete a run. """
  deleteDryRun(dryRunId:String!): Boolean!

  """ Assign a dry run to a project """
  assignDryRunToProject(dryRunId: String!, projectId: String!): DryRun!

  """ Create a docker registry credential """
  createDockerRegistryCredential(credential: DockerRegistryCredentialInput!): DockerRegistryCredential!

  """ Delete a docker registry credential """
  deleteDockerRegistryCredential(name: String!): Boolean!

  """ Update a docker registry credential """
  updateDockerRegistryCredential(credential: DockerRegistryCredentialInput!): DockerRegistryCredential!
}
